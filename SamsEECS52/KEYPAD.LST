8086/87/88/186 MACRO ASSEMBLER    KEYPAD                                                   03:50:04  05/31/:8  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE KEYPAD
OBJECT MODULE PLACED IN KEYPAD.OBJ
ASSEMBLER INVOKED BY:  C:\ASMSTU~1\ASM86.EXE KEYPAD.ASM M1 DB EP


LOC  OBJ                  LINE     SOURCE

                             1            NAME  keypad
                             2     
                             3     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4     ;                                                                            ;
                             5     ;                                    keypad                                ;
                             6     ;                           Keypad Event Handler                             ;
                             7     ;                                                                            ;
                             8     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9     
                            10     ; Description:      This program an event handler (interrupt service routine).
                            11     ;                   It reads from the keypad.
                            12     ;
                            13     ; Input:            Keypad
                            14     ; Output:           None.
                            15     ; User Interface:   call functions getkey() , key_available()
                            16     ; Error Handling:   None.
                            17     ;
                            18     ; Algorithms:       None.
                            19     ; Data Structures:  None.
                            20     ;
                            21     ; Revision History:
                            22     
                            23     ;     5/2/08  Samuel Yang     
                            24     
                            25     
                            26     ; local include files
                            27 +1  $INCLUDE(keypad.INC)
                      =1    28     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    29     ;                                                                            ;
                      =1    30     ;                                  keypad.INC                                ;
                      =1    31     ;                              Keypad Event Handler                          ;
                      =1    32     ;                                 Include File                               ;
                      =1    33     ;                                                                            ;
                      =1    34     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    35     
                      =1    36     ; This file contains the definitions for the Keypad Event Handler
                      =1    37     ; program (keypad.ASM).
                      =1    38     ;
                      =1    39     ; Revision History:
                      =1    40     
                      =1    41     ;     5/2/2008 Samuel Yang     
                      =1    42     
                      =1    43     
  0080                =1    44     KeypadAddress   EQU     0080H           ;keypad address
                      =1    45     
  000F                =1    46     KEYPADDATAMASK EQU 000fh                ;only use 4 bits
                      =1    47     
                            48 +1  $INCLUDE(boolean.INC)
                      =1    49     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    50     ;                                                                            ;
8086/87/88/186 MACRO ASSEMBLER    KEYPAD                                                   03:50:04  05/31/:8  PAGE    2


LOC  OBJ                  LINE     SOURCE

                      =1    51     ;                                  boolean.INC                               ;
                      =1    52     ;                             Boolean Definitions                            ;
                      =1    53     ;                                 Include File                               ;
                      =1    54     ;                                                                            ;
                      =1    55     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    56     
                      =1    57     ; This file contains the boolean definitions for the 80188 MP3 Player.
                      =1    58     ;
                      =1    59     ; Revision History:
                      =1    60     
                      =1    61     ;     5/2/2008 Samuel Yang     
                      =1    62     
                      =1    63     
  0001                =1    64     TRUE EQU 1h
  0000                =1    65     FALSE EQU 0h
                            66 +1  $INCLUDE(regAddrs.INC)
                      =1    67     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    68     ;                                                                            ;
                      =1    69     ;                                  regAddrs.INC                              ;
                      =1    70     ;                              Register Addresses and Values                 ;
                      =1    71     ;                                 Include File                               ;
                      =1    72     ;                                                                            ;
                      =1    73     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    74     
                      =1    75     ; This file contains the definitions for the 801C88 MP3 Player.
                      =1    76     ;
                      =1    77     ;
                      =1    78     ; Revision History:
                      =1    79     
                      =1    80     ;     5/2/2008 Samuel Yang     
                      =1    81     
                      =1    82     
                      =1    83     
                      =1    84     
                      =1    85     
                      =1    86     ; Interrupt Vectors
  000C                =1    87     Int0Vec         EQU     12               ;interrupt vector for INT 0
  000D                =1    88     Int1Vec         EQU     13               ;interrupt vector for INT 1
                      =1    89     
                      =1    90     
                      =1    91     ; Interrupt Controller Definitions
                      =1    92     
                      =1    93     ; Addresses
  FF38                =1    94     INT0Ctrlr        EQU    0FF38H           ;address of interrupt 0 controller
  FF3A                =1    95     INT1Ctrlr        EQU    0FF3AH           ;address of interrupt 1 controller
  FF32                =1    96     INTCtrlrCtrl    EQU     0FF32H          ;address of interrupt controller for timer
  FF22                =1    97     INTCtrlrEOI     EQU     0FF22H          ;address of interrupt controller EOI register
                      =1    98     
                      =1    99     ; Register Values
  0001                =1   100     INTCtrlrCVal    EQU     00001H          ;set priority for timers to 1 and enable
                      =1   101                                             ;000000000000----  reserved
                      =1   102                                             ;------------0---  enable timer interrupt
                      =1   103                                             ;-------------001  timer priority
  0011                =1   104     INT0CtrlrVal    EQU             00011H                  ;set to level triggering, pri
                                   ority 2, enable
8086/87/88/186 MACRO ASSEMBLER    KEYPAD                                                   03:50:04  05/31/:8  PAGE    3


LOC  OBJ                  LINE     SOURCE

                      =1   105                                             ;000000000-------  reserved
                      =1   106                                             ;---------0------  disable fully nested mode
                      =1   107                                             ;----------0-----  disable cascade mode
                      =1   108                                                                                     ;----
                                   -------1----  level triggering
                      =1   109                                             ;------------0---  enable interrupt
                      =1   110                                             ;-------------010  int priority         
                                                                      
  0012                =1   111     INT1CtrlrVal    EQU             00012H                  ;set to level triggering, pri
                                   ority 2, enable
                      =1   112                                             ;000000000-------  reserved
                      =1   113                                             ;---------0------  disable fully nested mode
                      =1   114                                             ;----------0-----  disable cascade mode
                      =1   115                                                                                     ;----
                                   -------1----  level triggering
                      =1   116                                             ;------------0---  enable interrupt
                      =1   117                                             ;-------------010  int priority         
                                                                                      
  001A                =1   118     INT1CtrlrValDisable EQU 0001AH                  ;set to level triggering, priority 2,
                                    disable
                      =1   119                                             ;000000000-------  reserved
                      =1   120                                             ;---------0------  disable fully nested mode
                      =1   121                                             ;----------0-----  disable cascade mode
                      =1   122                                                                                     ;----
                                   -------1----  level triggering
                      =1   123                                             ;------------1---  disable interrupt
                      =1   124                                             ;-------------010  int priority 
                      =1   125                                                                                     
  0008                =1   126     TimerEOI        EQU     00008H          ;Timer EOI command (samNone for all timers)
  8000                =1   127     NonSpecEOI      EQU     08000H          ;Non-specific EOI command
                      =1   128     
                      =1   129     
                      =1   130     ; Chip Select Unit Definitions
                      =1   131     
                      =1   132     ; Addresses
  FFA4                =1   133     PACSreg         EQU     0FFA4H          ;address of PACS register
  FFA8                =1   134     MPCSreg         EQU     0FFA8H          ;address of MPCS register
                      =1   135     
                      =1   136     
                      =1   137     ; Control Register Values
  0000                =1   138     PACSval         EQU     00000H          ;PCS base at 0, 3 wait states
                      =1   139                                             ;0000000000------  starts at address 0
                      =1   140                                             ;----------000---  reserved
                      =1   141                                             ;-------------0--  wait for RDY inputs
                      =1   142                                             ;--------------11  3 wait states
  4003                =1   143     MPCSval         EQU     04003H          ;PCS in I/O space, use PCS5/6, 3 wait states
                      =1   144                                             ;0---------000---  reserved
                      =1   145                                             ;-1000000--------  MCS is 512KB
                      =1   146                                             ;--------0-------  output PCS5/PCS6
                      =1   147                                             ;---------0------  PCS in I/O space
                      =1   148                                             ;-------------0--  wait for RDY inputs
                      =1   149                                             ;--------------11  3 wait states
                      =1   150     
                      =1   151     ; Timing Definitions
                      =1   152     
8086/87/88/186 MACRO ASSEMBLER    KEYPAD                                                   03:50:04  05/31/:8  PAGE    4


LOC  OBJ                  LINE     SOURCE

                      =1   153     
                      =1   154     
                      =1   155     ; General Definitions
                      =1   156     
  0001                =1   157     FIRST_RESERVED_VEC      EQU     1       ;reserve vectors 1-3
  0003                =1   158     LAST_RESERVED_VEC       EQU     3
  0100                =1   159     NUM_IRQ_VECTORS         EQU     256     ;number of interrupt vectors
                      =1   160     
                           161     
                           162     CGROUP GROUP CODE
                           163     DGROUP GROUP DATA
                           164     
                           165     
----                       166     CODE SEGMENT PUBLIC 'CODE'
                           167     
                           168             ASSUME  CS:CGROUP, DS:DGROUP
                           169     
                           170     
                           171     
                           172     ; Int0EventHandler
                           173     ;
                           174     ; Description:       This procedure is the event handler for when the
                           175     ;                       keypad debouncing chip signals a pressed key.
                           176     ;
                           177     ; Operation:         Reads data in, updates status of pressed key.
                           178     ;
                           179     ; Arguments:         None.
                           180     ; Return Value:      None.
                           181     ;
                           182     ; Local Variables:   None.
                           183     ; Shared Variables:  keyCode, keyReady
                           184     
                           185     ; Input:            From keypad debouncing chip.
                           186     ; Output:            None.
                           187     ;
                           188     ; Error Handling:    None.
                           189     ;
                           190     ; Algorithms:        None.
                           191     ; Data Structures:   None.
                           192     ;
                           193     ; Registers Changed: None
                           194     ; Stack Depth:       3 words
                           195     ;
                           196     ; Last Modified:     5-2-2008
                           197     
0000                       198     Int0EventHandler       PROC    NEAR
                           199                                             PUBLIC Int0EventHandler
0000 50                    200                     PUSH AX                         ;save register values
0001 52                    201                     PUSH DX
0002 33C0                  202                     XOR AX, AX
0004 33D2                  203                     XOR DX, DX
0006 BA8000                204                     MOV DX, keypadAddress
0009 EC                    205                     IN AL, DX
000A 250F00                206                     AND AX, KEYPADDATAMASK
000D A30000         R      207                     MOV keyCode, AX
8086/87/88/186 MACRO ASSEMBLER    KEYPAD                                                   03:50:04  05/31/:8  PAGE    5


LOC  OBJ                  LINE     SOURCE

0010 C60602000190   R      208                     MOV keyReady, TRUE
                           209     
0016 BA22FF                210             MOV     DX, INTCtrlrEOI         ;send the EOI to the interrupt controller
0019 B80C00                211             MOV     AX, Int0Vec
001C EE                    212             OUT     DX, AL
                           213                     
                           214                     
001D 5A                    215                     POP DX                                                  ;restore regi
                                   ster values
001E 58                    216                     POP AX
001F CF                    217             IRET                            ;and return (Event Handlers end with IRET not
                                    RET)
                           218     
                           219     
                           220     Int0EventHandler       ENDP
                           221     
                           222     
                           223     ; InitKeypad
                           224     ;
                           225     ; Description:       This procedure initializes everything for keypad
                           226     ;
                           227     ; Operation:        Initializes shared variables
                           228     ;
                           229     ; Arguments:         None.
                           230     ; Return Value:      None.
                           231     ;
                           232     ; Local Variables:   None.
                           233     ; Shared Variables:  keyCode, keyReady
                           234     
                           235     ; Input:            None.
                           236     ; Output:            None.
                           237     ;
                           238     ; Error Handling:    None.
                           239     ;
                           240     ; Algorithms:        None.
                           241     ; Data Structures:   None.
                           242     ;
                           243     ; Registers Changed: None
                           244     ; Stack Depth:       1 words
                           245     ;
                           246     ; Last Modified:     5-2-2008
0020                       247     InitKeypad   PROC    NEAR
                           248                             PUBLIC InitKeypad
0020 C60602000090   R      249                     MOV keyReady, FALSE     
0026 C70600000000   R      250                     MOV keyCode, 0                                  ;this doesn't really 
                                   have to be initialized since keyReady is FALSE
                           251                     
002C C3                    252                     RET
                           253     InitKeypad   ENDP
                           254     
                           255     ; key_available
                           256     ;
                           257     ; Description:       Returns true if a key has been pressed
                           258     ;
                           259     ; Operation:        Returns shared variable
8086/87/88/186 MACRO ASSEMBLER    KEYPAD                                                   03:50:04  05/31/:8  PAGE    6


LOC  OBJ                  LINE     SOURCE

                           260     ;
                           261     ; Arguments:         None.
                           262     ; Return Value:     keyReady in AL
                           263     ;
                           264     ; Local Variables:   None.
                           265     ; Shared Variables:  keyReady
                           266     
                           267     ; Input:            None.
                           268     ; Output:            None.
                           269     ;
                           270     ; Error Handling:    None.
                           271     ;
                           272     ; Algorithms:        None.
                           273     ; Data Structures:   None.
                           274     ;
                           275     ; Registers Changed: AL
                           276     ; Stack Depth:       1 words
                           277     ;
                           278     ; Last Modified:     5-2-2008
002D                       279     key_available   PROC    NEAR
                           280                             PUBLIC key_available
002D A00200         R      281                     MOV AL, keyReady        
0030 C3                    282                     RET
                           283     key_available   ENDP
                           284     
                           285     ; getkey
                           286     ;
                           287     ; Description:       Returns keycode of pressed key
                           288     ;
                           289     ; Operation:        Returns shared variable
                           290     ;
                           291     ; Arguments:         None.
                           292     ; Return Value:     keyCode in AX
                           293     ;
                           294     ; Local Variables:   None.
                           295     ; Shared Variables:  keyCode, keyReady
                           296     
                           297     ; Input:            None.
                           298     ; Output:            None.
                           299     ;
                           300     ; Error Handling:    getkey should only be called if key_available returns TRUE
                           301     ;
                           302     ; Algorithms:        None.
                           303     ; Data Structures:   None.
                           304     ;
                           305     ; Registers Changed: AX
                           306     ; Stack Depth:       1 words
                           307     ;
                           308     ; Last Modified:     5-2-2008
0031                       309     getkey   PROC    NEAR
                           310                             PUBLIC getkey
0031 A10000         R      311                     MOV AX, keyCode
0034 C60602000090   R      312                     MOV keyReady, FALSE              ;reset keyReady flag since no new pr
                                   essed keys to report
003A C3                    313                     RET
8086/87/88/186 MACRO ASSEMBLER    KEYPAD                                                   03:50:04  05/31/:8  PAGE    7


LOC  OBJ                  LINE     SOURCE

                           314     getkey   ENDP
                           315     
                           316     
                           317     ; InitCS
                           318     ;
                           319     ; Description:       Initialize the Peripheral Chip Selects on the 80188.
                           320     ;
                           321     ; Operation:         Write the initial values to the PACS and MPCS registers.
                           322     ;
                           323     ; Arguments:         None.
                           324     ; Return Value:      None.
                           325     ;
                           326     ; Local Variables:   None.
                           327     ; Shared Variables:  None.
                           328     ; Global Variables:  None.
                           329     ;
                           330     ; Input:             None.
                           331     ; Output:            None.
                           332     ;
                           333     ; Error Handling:    None.
                           334     ;
                           335     ; Algorithms:        None.
                           336     ; Data Structures:   None.
                           337     ;
                           338     ; Registers Changed: AX, DX
                           339     ; Stack Depth:       0 words
                           340     ;
                           341     ; Author:            Glen George
                           342     ; Last Modified:     Oct. 29, 1997
                           343     
003B                       344     InitCS  PROC    NEAR
                           345                     PUBLIC InitCS
                           346     
                           347     
003B BAA4FF                348             MOV     DX, PACSreg     ;setup to write to PACS register
003E B80000                349             MOV     AX, PACSval
0041 EE                    350             OUT     DX, AL          ;write PACSval to PACS (base at 0, 3 wait states)
                           351     
0042 BAA8FF                352             MOV     DX, MPCSreg     ;setup to write to MPCS register
0045 B80340                353             MOV     AX, MPCSval
0048 EE                    354             OUT     DX, AL          ;write MPCSval to MPCS (I/O space, 3 wait states)
                           355     
                           356     
0049 C3                    357             RET                     ;done so return
                           358     
                           359     
                           360     InitCS  ENDP
                           361     
                           362     
                           363     
                           364     
                           365     
                           366     
                           367     
                           368     
8086/87/88/186 MACRO ASSEMBLER    KEYPAD                                                   03:50:04  05/31/:8  PAGE    8


LOC  OBJ                  LINE     SOURCE

                           369     ; InstallHandlerInt0
                           370     ;
                           371     ; Description:       Install the event handler for the int0 interrupt.
                           372     ;
                           373     ; Operation:         Writes the address of the int 0 event handler to the
                           374     ;                    appropriate interrupt vector.
                           375     ;
                           376     ; Arguments:         None.
                           377     ; Return Value:      None.
                           378     ;
                           379     ; Local Variables:   None.
                           380     ; Shared Variables:  None.
                           381     ; Global Variables:  None.
                           382     ;
                           383     ; Input:             None.
                           384     ; Output:            None.
                           385     ;
                           386     ; Error Handling:    None.
                           387     ;
                           388     ; Algorithms:        None.
                           389     ; Data Structures:   None.
                           390     ;
                           391     ; Registers Changed: flags, AX, ES
                           392     ; Stack Depth:       0 words
                           393     ;
                           394     ; Author:            Samuel Yang
                           395     ; Last Modified:     5-2-2008
                           396     
004A                       397     InstallHandlerInt0  PROC    NEAR
                           398                             PUBLIC InstallHandlerInt0
                           399     
                           400     
004A 33C0                  401             XOR     AX, AX          ;clear ES (interrupt vectors are in segment 0)
004C 8EC0                  402             MOV     ES, AX
                           403                                     ;store the vector
004E 26C70630000000 R      404             MOV     ES: WORD PTR (4 * Int0Vec), OFFSET(Int0EventHandler)
0055 26C7063200---- R      405             MOV     ES: WORD PTR (4 * Int0Vec + 2), SEG(Int0EventHandler)
                           406     
005C BA38FF                407                     MOV DX, INT0Ctrlr
005F B011                  408                     MOV AL, INT0CtrlrVal
0061 EE                    409                     OUT DX, AL
0062 FB                    410                     STI ;enable interrupts
                           411                     
0063 C3                    412             RET                     ;all done, return
                           413     
                           414     
                           415     InstallHandlerInt0  ENDP
                           416     
                           417     
                           418     
                           419     
                           420     ; ClrIRQVectors
                           421     ;
                           422     ; Description:      This functions installs the IllegalEventHandler for all
                           423     ;                   interrupt vectors in the interrupt vector table.  Note
8086/87/88/186 MACRO ASSEMBLER    KEYPAD                                                   03:50:04  05/31/:8  PAGE    9


LOC  OBJ                  LINE     SOURCE

                           424     ;                   that all 256 vectors are initialized so the code must be
                           425     ;                   located above 400H.  The initialization skips  (does not
                           426     ;                   initialize vectors) from vectors FIRST_RESERVED_VEC to
                           427     ;                   LAST_RESERVED_VEC.
                           428     ;
                           429     ; Arguments:        None.
                           430     ; Return Value:     None.
                           431     ;
                           432     ; Local Variables:  CX    - vector counter.
                           433     ;                   ES:SI - pointer to vector table.
                           434     ; Shared Variables: None.
                           435     ; Global Variables: None.
                           436     ;
                           437     ; Input:            None.
                           438     ; Output:           None.
                           439     ;
                           440     ; Error Handling:   None.
                           441     ;
                           442     ; Algorithms:       None.
                           443     ; Data Structures:  None.
                           444     ;
                           445     ; Registers Used:   flags, AX, CX, SI, ES
                           446     ; Stack Depth:      1 word
                           447     ;
                           448     ; Author:           Glen George
                           449     ; Last Modified:    Feb. 8, 2002
                           450     
0064                       451     ClrIRQVectors   PROC    NEAR
                           452                             PUBLIC ClrIRQVectors
                           453     
                           454     
0064                       455     InitClrVectorLoop:              ;setup to store the same handler 256 times
                           456     
0064 33C0                  457             XOR     AX, AX          ;clear ES (interrupt vectors are in segment 0)
0066 8EC0                  458             MOV     ES, AX
0068 BE0000                459             MOV     SI, 0           ;initialize SI to skip RESERVED_VECS (4 bytes each)
                           460     
006B B90001                461             MOV     CX, 256         ;up to 256 vectors to initialize
                           462     
                           463     
006E                       464     ClrVectorLoop:                  ;loop clearing each vector
                           465                                     ;check if should store the vector
006E 83FE04                466             CMP     SI, 4 * FIRST_RESERVED_VEC
0071 7205                  467             JB      DoStore         ;if before start of reserved field - store it
0073 83FE0C                468             CMP     SI, 4 * LAST_RESERVED_VEC
0076 760B                  469             JBE     DoneStore       ;if in the reserved vectors - don't store it
                           470             
                           471     
0078                       472     DoStore:                        ;store the vector
0078 26C7048900     R      473             MOV     ES: WORD PTR [SI], OFFSET(IllegalEventHandler)
007D 26C74402----   R      474             MOV     ES: WORD PTR [SI + 2], SEG(IllegalEventHandler)
                           475     
0083                       476     DoneStore:                      ;done storing the vector
0083 83C604                477             ADD     SI, 4           ;update pointer to next vector
                           478     
8086/87/88/186 MACRO ASSEMBLER    KEYPAD                                                   03:50:04  05/31/:8  PAGE   10


LOC  OBJ                  LINE     SOURCE

0086 E2E6                  479             LOOP    ClrVectorLoop   ;loop until have cleared all vectors
                           480         
                           481     
                           482     
0088                       483     EndClrIRQVectors:               ;all done, return
0088 C3                    484             RET
                           485     
                           486     
                           487     ClrIRQVectors   ENDP
                           488     
                           489     
                           490     
                           491     ; IllegalEventHandler
                           492     ;
                           493     ; Description:       This procedure is the event handler for illegal
                           494     ;                    (uninitialized) interrupts.  It does nothing - it just
                           495     ;                    returns after sending a non-specific EOI.
                           496     ;
                           497     ; Operation:         Send a non-specific EOI and return.
                           498     ;
                           499     ; Arguments:         None.
                           500     ; Return Value:      None.
                           501     ;
                           502     ; Local Variables:   None.
                           503     ; Shared Variables:  None.
                           504     ; Global Variables:  None.
                           505     ;
                           506     ; Input:             None.
                           507     ; Output:            None.
                           508     ;
                           509     ; Error Handling:    None.
                           510     ;
                           511     ; Algorithms:        None.
                           512     ; Data Structures:   None.
                           513     ;
                           514     ; Registers Changed: None
                           515     ; Stack Depth:       2 words
                           516     ;
                           517     ; Author:            Glen George
                           518     ; Last Modified:     Dec. 25, 2000
                           519     
0089                       520     IllegalEventHandler     PROC    NEAR
                           521     
0089 90                    522             NOP                             ;do nothing (can set breakpoint here)
                           523     
008A 50                    524             PUSH    AX                      ;save the registers
008B 52                    525             PUSH    DX
                           526     
008C BA22FF                527             MOV     DX, INTCtrlrEOI         ;send a non-sepecific EOI to the
008F B80080                528             MOV     AX, NonSpecEOI          ;   interrupt controller to clear out
0092 EE                    529             OUT     DX, AL                  ;   the interrupt that got us here
                           530     
0093 5A                    531             POP     DX                      ;restore the registers
0094 58                    532             POP     AX
                           533     
8086/87/88/186 MACRO ASSEMBLER    KEYPAD                                                   03:50:04  05/31/:8  PAGE   11


LOC  OBJ                  LINE     SOURCE

0095 CF                    534             IRET                            ;and return
                           535     
                           536     
                           537     IllegalEventHandler     ENDP
                           538     
                           539     
----                       540     CODE ENDS
                           541     
                           542     ;the data segment
                           543     
----                       544     DATA    SEGMENT PUBLIC  'DATA'
0000 ????                  545     keyCode  DW ?
0002 ??                    546     keyReady DB ?
----                       547     DATA    ENDS
                           548     
                           549     
                           550     
                           551     
                           552             END     

ASSEMBLY COMPLETE, NO ERRORS FOUND
