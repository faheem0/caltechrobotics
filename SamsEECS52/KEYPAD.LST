8086/87/88/186 MACRO ASSEMBLER    KEYPAD                                                   00:46:18  06/09/:8  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE KEYPAD
OBJECT MODULE PLACED IN KEYPAD.OBJ
ASSEMBLER INVOKED BY:  C:\ASMSTU~1\ASM86.EXE KEYPAD.ASM M1 DB EP


LOC  OBJ                  LINE     SOURCE

                             1            NAME  keypad
                             2     
                             3     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4     ;                                                                            ;
                             5     ;                                    keypad                                ;
                             6     ;                           Keypad Event Handler                             ;
                             7     ;                                                                            ;
                             8     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9     
                            10     ; Description:      This program an event handler (interrupt service routine).
                            11     ;                   It reads from the keypad.
                            12     ;
                            13     ; Input:            Keypad
                            14     ; Output:           None.
                            15     ; User Interface:   call functions getkey() , key_available()
                            16     ; Error Handling:   None.
                            17     ;
                            18     ; Algorithms:       None.
                            19     ; Data Structures:  None.
                            20     ;
                            21     ; Revision History:
                            22     
                            23     ;     5/2/08  Samuel Yang     
                            24     
                            25     
                            26     ; local include files
                            27 +1  $INCLUDE(keypad.INC)
                      =1    28     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    29     ;                                                                            ;
                      =1    30     ;                                  keypad.INC                                ;
                      =1    31     ;                              Keypad Event Handler                          ;
                      =1    32     ;                                 Include File                               ;
                      =1    33     ;                                                                            ;
                      =1    34     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    35     
                      =1    36     ; This file contains the definitions for the Keypad Event Handler
                      =1    37     ; program (keypad.ASM).
                      =1    38     ;
                      =1    39     ; Revision History:
                      =1    40     
                      =1    41     ;     5/2/2008 Samuel Yang     
                      =1    42     
                      =1    43     
  0080                =1    44     KeypadAddress   EQU     0080H           ;keypad address
                      =1    45     
  000F                =1    46     KEYPADDATAMASK EQU 000fh                ;only use 4 bits
                      =1    47     
                            48 +1  $INCLUDE(boolean.INC)
                      =1    49     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    50     ;                                                                            ;
8086/87/88/186 MACRO ASSEMBLER    KEYPAD                                                   00:46:18  06/09/:8  PAGE    2


LOC  OBJ                  LINE     SOURCE

                      =1    51     ;                                  boolean.INC                               ;
                      =1    52     ;                             Boolean Definitions                            ;
                      =1    53     ;                                 Include File                               ;
                      =1    54     ;                                                                            ;
                      =1    55     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    56     
                      =1    57     ; This file contains the boolean definitions for the 80188 MP3 Player.
                      =1    58     ;
                      =1    59     ; Revision History:
                      =1    60     
                      =1    61     ;     5/2/2008 Samuel Yang     
                      =1    62     
                      =1    63     
  0001                =1    64     TRUE EQU 1h
  0000                =1    65     FALSE EQU 0h
                            66 +1  $INCLUDE(regAddrs.INC)
                      =1    67     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    68     ;                                                                            ;
                      =1    69     ;                                  regAddrs.INC                              ;
                      =1    70     ;                              Register Addresses and Values                 ;
                      =1    71     ;                                 Include File                               ;
                      =1    72     ;                                                                            ;
                      =1    73     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    74     
                      =1    75     ; This file contains the definitions for the 801C88 MP3 Player.
                      =1    76     ;
                      =1    77     ;
                      =1    78     ; Revision History:
                      =1    79     
                      =1    80     ;     5/2/2008 Samuel Yang     
                      =1    81     
                      =1    82     
                      =1    83     
                      =1    84     
                      =1    85     
                      =1    86     ; Interrupt Vectors
  000C                =1    87     Int0Vec         EQU     12               ;interrupt vector for INT 0
  000D                =1    88     Int1Vec         EQU     13               ;interrupt vector for INT 1
                      =1    89     
                      =1    90     
                      =1    91     ; Interrupt Controller Definitions
                      =1    92     
                      =1    93     ; Addresses
  FF38                =1    94     INT0Ctrlr        EQU    0FF38H           ;address of interrupt 0 controller
  FF3A                =1    95     INT1Ctrlr        EQU    0FF3AH           ;address of interrupt 1 controller
  FF32                =1    96     INTCtrlrCtrl    EQU     0FF32H          ;address of interrupt controller for timer
  FF22                =1    97     INTCtrlrEOI     EQU     0FF22H          ;address of interrupt controller EOI register
                      =1    98     
                      =1    99     ; Register Values
  0001                =1   100     INTCtrlrCVal    EQU     00001H          ;set priority for timers to 1 and enable
                      =1   101                                             ;000000000000----  reserved
                      =1   102                                             ;------------0---  enable timer interrupt
                      =1   103                                             ;-------------001  timer priority
  0011                =1   104     INT0CtrlrVal    EQU             00011H                  ;set to level triggering, pri
                                   ority 2, enable
8086/87/88/186 MACRO ASSEMBLER    KEYPAD                                                   00:46:18  06/09/:8  PAGE    3


LOC  OBJ                  LINE     SOURCE

                      =1   105                                             ;000000000-------  reserved
                      =1   106                                             ;---------0------  disable fully nested mode
                      =1   107                                             ;----------0-----  disable cascade mode
                      =1   108                                                                                     ;----
                                   -------1----  level triggering
                      =1   109                                             ;------------0---  enable interrupt
                      =1   110                                             ;-------------010  int priority         
                                                                      
  0012                =1   111     INT1CtrlrVal    EQU             00012H                  ;set to level triggering, pri
                                   ority 2, enable
                      =1   112                                             ;000000000-------  reserved
                      =1   113                                             ;---------0------  disable fully nested mode
                      =1   114                                             ;----------0-----  disable cascade mode
                      =1   115                                                                                     ;----
                                   -------1----  level triggering
                      =1   116                                             ;------------0---  enable interrupt
                      =1   117                                             ;-------------010  int priority         
                                                                                      
  001A                =1   118     INT1CtrlrValDisable EQU 0001AH                  ;set to level triggering, priority 2,
                                    disable
                      =1   119                                             ;000000000-------  reserved
                      =1   120                                             ;---------0------  disable fully nested mode
                      =1   121                                             ;----------0-----  disable cascade mode
                      =1   122                                                                                     ;----
                                   -------1----  level triggering
                      =1   123                                             ;------------1---  disable interrupt
                      =1   124                                             ;-------------010  int priority 
                      =1   125                                                                                     
  0008                =1   126     TimerEOI        EQU     00008H          ;Timer EOI command (samNone for all timers)
  8000                =1   127     NonSpecEOI      EQU     08000H          ;Non-specific EOI command
                      =1   128     
                      =1   129     
                      =1   130     ; Chip Select Unit Definitions
                      =1   131     
                      =1   132     ; Addresses
  FFA4                =1   133     PACSreg         EQU     0FFA4H          ;address of PACS register
  FFA8                =1   134     MPCSreg         EQU     0FFA8H          ;address of MPCS register
  FFA6                =1   135     MMCSaddr                EQU     0ffa6H                  ;address of MCS control regis
                                   ter
                      =1   136     
                      =1   137     ; Control Register Values
  8001                =1   138     MMCSvalue           EQU     8001H                       ;set to the following:
                      =1   139                                             ;1000000---------  start at 80000H
                      =1   140                                             ;-------000000---  reserved
                      =1   141                                             ;---------------1  1 wait state min
  0003                =1   142     PACSval         EQU     00003H          ;PCS base at 0, 3 wait states
                      =1   143                                             ;0000000000------  starts at address 0
                      =1   144                                             ;----------000---  reserved
                      =1   145                                             ;-------------0--  wait for RDY inputs
                      =1   146                                             ;--------------11  3 wait states
  4000                =1   147     MPCSval         EQU     04000H          ;PCS in I/O space, use PCS5/6, 3 wait states
                      =1   148                                             ;0---------000---  reserved
                      =1   149                                             ;-1000000--------  MCS is 512KB
                      =1   150                                             ;--------0-------  output PCS5/PCS6
                      =1   151                                             ;---------0------  PCS in I/O space
8086/87/88/186 MACRO ASSEMBLER    KEYPAD                                                   00:46:18  06/09/:8  PAGE    4


LOC  OBJ                  LINE     SOURCE

                      =1   152                                             ;-------------0--  wait for RDY inputs
                      =1   153                                             ;--------------11  3 wait states
                      =1   154     
                      =1   155     ; Timing Definitions
                      =1   156     
                      =1   157     
                      =1   158     
                      =1   159     ; General Definitions
                      =1   160     
  0001                =1   161     FIRST_RESERVED_VEC      EQU     1       ;reserve vectors 1-3
  0003                =1   162     LAST_RESERVED_VEC       EQU     3
  0100                =1   163     NUM_IRQ_VECTORS         EQU     256     ;number of interrupt vectors
                      =1   164     
                           165     
                           166     CGROUP GROUP CODE
                           167     DGROUP GROUP DATA
                           168     
                           169     
----                       170     CODE SEGMENT PUBLIC 'CODE'
                           171     
                           172             ASSUME  CS:CGROUP, DS:DGROUP
                           173     
                           174     
                           175     
                           176     ; Int0EventHandler
                           177     ;
                           178     ; Description:       This procedure is the event handler for when the
                           179     ;                       keypad debouncing chip signals a pressed key.
                           180     ;
                           181     ; Operation:         Reads data in, updates status of pressed key.
                           182     ;
                           183     ; Arguments:         None.
                           184     ; Return Value:      None.
                           185     ;
                           186     ; Local Variables:   None.
                           187     ; Shared Variables:  keyCode, keyReady
                           188     
                           189     ; Input:            From keypad debouncing chip.
                           190     ; Output:            None.
                           191     ;
                           192     ; Error Handling:    None.
                           193     ;
                           194     ; Algorithms:        None.
                           195     ; Data Structures:   None.
                           196     ;
                           197     ; Registers Changed: None
                           198     ; Stack Depth:       3 words
                           199     ;
                           200     ; Last Modified:     5-2-2008
                           201     
0000                       202     Int0EventHandler       PROC    NEAR
                           203                                             PUBLIC Int0EventHandler
0000 50                    204                     PUSH AX                         ;save register values
0001 52                    205                     PUSH DX
0002 33C0                  206                     XOR AX, AX
8086/87/88/186 MACRO ASSEMBLER    KEYPAD                                                   00:46:18  06/09/:8  PAGE    5


LOC  OBJ                  LINE     SOURCE

0004 33D2                  207                     XOR DX, DX
0006 BA8000                208                     MOV DX, keypadAddress
0009 EC                    209                     IN AL, DX
000A 250F00                210                     AND AX, KEYPADDATAMASK
000D A30000         R      211                     MOV keyCode, AX
0010 C60602000190   R      212                     MOV keyReady, TRUE
                           213     
0016 BA22FF                214             MOV     DX, INTCtrlrEOI         ;send the EOI to the interrupt controller
0019 B80C00                215             MOV     AX, Int0Vec
001C EE                    216             OUT     DX, AL
                           217                     
                           218                     
001D 5A                    219                     POP DX                                                  ;restore regi
                                   ster values
001E 58                    220                     POP AX
001F CF                    221             IRET                            ;and return (Event Handlers end with IRET not
                                    RET)
                           222     
                           223     
                           224     Int0EventHandler       ENDP
                           225     
                           226     
                           227     ; InitKeypad
                           228     ;
                           229     ; Description:       This procedure initializes everything for keypad
                           230     ;
                           231     ; Operation:        Initializes shared variables
                           232     ;
                           233     ; Arguments:         None.
                           234     ; Return Value:      None.
                           235     ;
                           236     ; Local Variables:   None.
                           237     ; Shared Variables:  keyCode, keyReady
                           238     
                           239     ; Input:            None.
                           240     ; Output:            None.
                           241     ;
                           242     ; Error Handling:    None.
                           243     ;
                           244     ; Algorithms:        None.
                           245     ; Data Structures:   None.
                           246     ;
                           247     ; Registers Changed: None
                           248     ; Stack Depth:       1 words
                           249     ;
                           250     ; Last Modified:     5-2-2008
0020                       251     InitKeypad   PROC    NEAR
                           252                             PUBLIC InitKeypad
0020 C60602000090   R      253                     MOV keyReady, FALSE     
0026 C70600000000   R      254                     MOV keyCode, 0                                  ;this doesn't really 
                                   have to be initialized since keyReady is FALSE
                           255                     
002C C3                    256                     RET
                           257     InitKeypad   ENDP
                           258     
8086/87/88/186 MACRO ASSEMBLER    KEYPAD                                                   00:46:18  06/09/:8  PAGE    6


LOC  OBJ                  LINE     SOURCE

                           259     ; key_available
                           260     ;
                           261     ; Description:       Returns true if a key has been pressed
                           262     ;
                           263     ; Operation:        Returns shared variable
                           264     ;
                           265     ; Arguments:         None.
                           266     ; Return Value:     keyReady in AL
                           267     ;
                           268     ; Local Variables:   None.
                           269     ; Shared Variables:  keyReady
                           270     
                           271     ; Input:            None.
                           272     ; Output:            None.
                           273     ;
                           274     ; Error Handling:    None.
                           275     ;
                           276     ; Algorithms:        None.
                           277     ; Data Structures:   None.
                           278     ;
                           279     ; Registers Changed: AL
                           280     ; Stack Depth:       1 words
                           281     ;
                           282     ; Last Modified:     5-2-2008
002D                       283     key_available   PROC    NEAR
                           284                             PUBLIC key_available
002D A00200         R      285                     MOV AL, keyReady        
0030 C3                    286                     RET
                           287     key_available   ENDP
                           288     
                           289     ; getkey
                           290     ;
                           291     ; Description:       Returns keycode of pressed key
                           292     ;
                           293     ; Operation:        Returns shared variable
                           294     ;
                           295     ; Arguments:         None.
                           296     ; Return Value:     keyCode in AX
                           297     ;
                           298     ; Local Variables:   None.
                           299     ; Shared Variables:  keyCode, keyReady
                           300     
                           301     ; Input:            None.
                           302     ; Output:            None.
                           303     ;
                           304     ; Error Handling:    getkey should only be called if key_available returns TRUE
                           305     ;
                           306     ; Algorithms:        None.
                           307     ; Data Structures:   None.
                           308     ;
                           309     ; Registers Changed: AX
                           310     ; Stack Depth:       1 words
                           311     ;
                           312     ; Last Modified:     5-2-2008
0031                       313     getkey   PROC    NEAR
8086/87/88/186 MACRO ASSEMBLER    KEYPAD                                                   00:46:18  06/09/:8  PAGE    7


LOC  OBJ                  LINE     SOURCE

                           314                             PUBLIC getkey
0031 A10000         R      315                     MOV AX, keyCode
0034 C60602000090   R      316                     MOV keyReady, FALSE              ;reset keyReady flag since no new pr
                                   essed keys to report
003A C3                    317                     RET
                           318     getkey   ENDP
                           319     
                           320     
                           321     ; InitCS
                           322     ;
                           323     ; Description:       Initialize the Peripheral Chip Selects on the 80188.
                           324     ;
                           325     ; Operation:         Write the initial values to the PACS and MPCS registers.
                           326     ;
                           327     ; Arguments:         None.
                           328     ; Return Value:      None.
                           329     ;
                           330     ; Local Variables:   None.
                           331     ; Shared Variables:  None.
                           332     ; Global Variables:  None.
                           333     ;
                           334     ; Input:             None.
                           335     ; Output:            None.
                           336     ;
                           337     ; Error Handling:    None.
                           338     ;
                           339     ; Algorithms:        None.
                           340     ; Data Structures:   None.
                           341     ;
                           342     ; Registers Changed: AX, DX
                           343     ; Stack Depth:       0 words
                           344     ;
                           345     ; Author:            Glen George
                           346     ; Last Modified:     Oct. 29, 1997
                           347     
003B                       348     InitCS  PROC    NEAR
                           349                     PUBLIC InitCS
                           350     
                           351                     
                           352                     
003B BAA4FF                353             MOV     DX, PACSreg     ;setup to write to PACS register
003E B80300                354             MOV     AX, PACSval
0041 EE                    355             OUT     DX, AL          ;write PACSval to PACS (base at 0, 3 wait states)
                           356     
0042 BAA8FF                357             MOV     DX, MPCSreg     ;setup to write to MPCS register
0045 B80040                358             MOV     AX, MPCSval
0048 EE                    359             OUT     DX, AL          ;write MPCSval to MPCS (I/O space, 3 wait states)
                           360     
0049 BAA6FF                361                     MOV DX, MMCSaddr        ;init MMCS
004C B80180                362                     MOV AX, MMCSvalue
004F EF                    363                     OUT DX, AX
                           364                     
0050 C3                    365             RET                     ;done so return
                           366     
                           367     
8086/87/88/186 MACRO ASSEMBLER    KEYPAD                                                   00:46:18  06/09/:8  PAGE    8


LOC  OBJ                  LINE     SOURCE

                           368     InitCS  ENDP
                           369     
                           370     
                           371     
                           372     
                           373     
                           374     
                           375     
                           376     
                           377     ; InstallHandlerInt0
                           378     ;
                           379     ; Description:       Install the event handler for the int0 interrupt.
                           380     ;
                           381     ; Operation:         Writes the address of the int 0 event handler to the
                           382     ;                    appropriate interrupt vector.
                           383     ;
                           384     ; Arguments:         None.
                           385     ; Return Value:      None.
                           386     ;
                           387     ; Local Variables:   None.
                           388     ; Shared Variables:  None.
                           389     ; Global Variables:  None.
                           390     ;
                           391     ; Input:             None.
                           392     ; Output:            None.
                           393     ;
                           394     ; Error Handling:    None.
                           395     ;
                           396     ; Algorithms:        None.
                           397     ; Data Structures:   None.
                           398     ;
                           399     ; Registers Changed: flags, AX, ES
                           400     ; Stack Depth:       0 words
                           401     ;
                           402     ; Author:            Samuel Yang
                           403     ; Last Modified:     5-2-2008
                           404     
0051                       405     InstallHandlerInt0  PROC    NEAR
                           406                             PUBLIC InstallHandlerInt0
                           407     
                           408     
0051 33C0                  409             XOR     AX, AX          ;clear ES (interrupt vectors are in segment 0)
0053 8EC0                  410             MOV     ES, AX
                           411                                     ;store the vector
0055 26C70630000000 R      412             MOV     ES: WORD PTR (4 * Int0Vec), OFFSET(Int0EventHandler)
005C 26C7063200---- R      413             MOV     ES: WORD PTR (4 * Int0Vec + 2), SEG(Int0EventHandler)
                           414     
0063 BA38FF                415                     MOV DX, INT0Ctrlr
0066 B011                  416                     MOV AL, INT0CtrlrVal
0068 EE                    417                     OUT DX, AL
0069 FB                    418                     STI ;enable interrupts
                           419                     
006A C3                    420             RET                     ;all done, return
                           421     
                           422     
8086/87/88/186 MACRO ASSEMBLER    KEYPAD                                                   00:46:18  06/09/:8  PAGE    9


LOC  OBJ                  LINE     SOURCE

                           423     InstallHandlerInt0  ENDP
                           424     
                           425     
                           426     
                           427     
                           428     ; ClrIRQVectors
                           429     ;
                           430     ; Description:      This functions installs the IllegalEventHandler for all
                           431     ;                   interrupt vectors in the interrupt vector table.  Note
                           432     ;                   that all 256 vectors are initialized so the code must be
                           433     ;                   located above 400H.  The initialization skips  (does not
                           434     ;                   initialize vectors) from vectors FIRST_RESERVED_VEC to
                           435     ;                   LAST_RESERVED_VEC.
                           436     ;
                           437     ; Arguments:        None.
                           438     ; Return Value:     None.
                           439     ;
                           440     ; Local Variables:  CX    - vector counter.
                           441     ;                   ES:SI - pointer to vector table.
                           442     ; Shared Variables: None.
                           443     ; Global Variables: None.
                           444     ;
                           445     ; Input:            None.
                           446     ; Output:           None.
                           447     ;
                           448     ; Error Handling:   None.
                           449     ;
                           450     ; Algorithms:       None.
                           451     ; Data Structures:  None.
                           452     ;
                           453     ; Registers Used:   flags, AX, CX, SI, ES
                           454     ; Stack Depth:      1 word
                           455     ;
                           456     ; Author:           Glen George
                           457     ; Last Modified:    Feb. 8, 2002
                           458     
006B                       459     ClrIRQVectors   PROC    NEAR
                           460                             PUBLIC ClrIRQVectors
                           461     
                           462     
006B                       463     InitClrVectorLoop:              ;setup to store the same handler 256 times
                           464     
006B 33C0                  465             XOR     AX, AX          ;clear ES (interrupt vectors are in segment 0)
006D 8EC0                  466             MOV     ES, AX
006F BE0000                467             MOV     SI, 0           ;initialize SI to skip RESERVED_VECS (4 bytes each)
                           468     
0072 B90001                469             MOV     CX, 256         ;up to 256 vectors to initialize
                           470     
                           471     
0075                       472     ClrVectorLoop:                  ;loop clearing each vector
                           473                                     ;check if should store the vector
0075 83FE04                474             CMP     SI, 4 * FIRST_RESERVED_VEC
0078 7205                  475             JB      DoStore         ;if before start of reserved field - store it
007A 83FE0C                476             CMP     SI, 4 * LAST_RESERVED_VEC
007D 760B                  477             JBE     DoneStore       ;if in the reserved vectors - don't store it
8086/87/88/186 MACRO ASSEMBLER    KEYPAD                                                   00:46:18  06/09/:8  PAGE   10


LOC  OBJ                  LINE     SOURCE

                           478             
                           479     
007F                       480     DoStore:                        ;store the vector
007F 26C7049000     R      481             MOV     ES: WORD PTR [SI], OFFSET(IllegalEventHandler)
0084 26C74402----   R      482             MOV     ES: WORD PTR [SI + 2], SEG(IllegalEventHandler)
                           483     
008A                       484     DoneStore:                      ;done storing the vector
008A 83C604                485             ADD     SI, 4           ;update pointer to next vector
                           486     
008D E2E6                  487             LOOP    ClrVectorLoop   ;loop until have cleared all vectors
                           488         
                           489     
                           490     
008F                       491     EndClrIRQVectors:               ;all done, return
008F C3                    492             RET
                           493     
                           494     
                           495     ClrIRQVectors   ENDP
                           496     
                           497     
                           498     
                           499     ; IllegalEventHandler
                           500     ;
                           501     ; Description:       This procedure is the event handler for illegal
                           502     ;                    (uninitialized) interrupts.  It does nothing - it just
                           503     ;                    returns after sending a non-specific EOI.
                           504     ;
                           505     ; Operation:         Send a non-specific EOI and return.
                           506     ;
                           507     ; Arguments:         None.
                           508     ; Return Value:      None.
                           509     ;
                           510     ; Local Variables:   None.
                           511     ; Shared Variables:  None.
                           512     ; Global Variables:  None.
                           513     ;
                           514     ; Input:             None.
                           515     ; Output:            None.
                           516     ;
                           517     ; Error Handling:    None.
                           518     ;
                           519     ; Algorithms:        None.
                           520     ; Data Structures:   None.
                           521     ;
                           522     ; Registers Changed: None
                           523     ; Stack Depth:       2 words
                           524     ;
                           525     ; Author:            Glen George
                           526     ; Last Modified:     Dec. 25, 2000
                           527     
0090                       528     IllegalEventHandler     PROC    NEAR
                           529     
0090 90                    530             NOP                             ;do nothing (can set breakpoint here)
                           531     
0091 50                    532             PUSH    AX                      ;save the registers
8086/87/88/186 MACRO ASSEMBLER    KEYPAD                                                   00:46:18  06/09/:8  PAGE   11


LOC  OBJ                  LINE     SOURCE

0092 52                    533             PUSH    DX
                           534     
0093 BA22FF                535             MOV     DX, INTCtrlrEOI         ;send a non-sepecific EOI to the
0096 B80080                536             MOV     AX, NonSpecEOI          ;   interrupt controller to clear out
0099 EE                    537             OUT     DX, AL                  ;   the interrupt that got us here
                           538     
009A 5A                    539             POP     DX                      ;restore the registers
009B 58                    540             POP     AX
                           541     
009C CF                    542             IRET                            ;and return
                           543     
                           544     
                           545     IllegalEventHandler     ENDP
                           546     
                           547     
----                       548     CODE ENDS
                           549     
                           550     ;the data segment
                           551     
----                       552     DATA    SEGMENT PUBLIC  'DATA'
0000 ????                  553     keyCode  DW ?
0002 ??                    554     keyReady DB ?
----                       555     DATA    ENDS
                           556     
                           557     
                           558     
                           559     
                           560             END     

ASSEMBLY COMPLETE, NO ERRORS FOUND
