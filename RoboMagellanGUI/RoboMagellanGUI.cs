//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.Ccr.Core;
using Microsoft.Dss.Core;
using Microsoft.Dss.Core.Attributes;
using Microsoft.Dss.ServiceModel.Dssp;
using Microsoft.Dss.ServiceModel.DsspServiceBase;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using W3C.Soap;
using robomagellan = RoboMagellan;
using gps = RoboMagellan.GenericGPS.Proxy;
using control = RoboMagellan.Proxy;
using System.Windows.Forms;
using Microsoft.Ccr.Adapters.WinForms;


namespace RoboMagellan.RoboMagellanGUI
{
    
    
    /// <summary>
    /// Implementation class for RoboMagellanGUI
    /// </summary>
    [DisplayName("RoboMagellanGUI")]
    [Description("The User Interface for RoboMagellan")]
    [Contract(Contract.Identifier)]
    public class RoboMagellanGUIService : DsspServiceBase
    {
        [Partner("gps", Contract = gps.Contract.Identifier, CreationPolicy = PartnerCreationPolicy.UseExistingOrCreate)]
        private gps.GenericGPSOperations _gpsPort = new gps.GenericGPSOperations();
        private gps.GenericGPSOperations _gpsNotify = new gps.GenericGPSOperations();
        
        [Partner("maincontrol", Contract = control.Contract.Identifier, CreationPolicy = PartnerCreationPolicy.UseExistingOrCreate)]
        private control.MainControlOperations _controlPort = new control.MainControlOperations();
        private control.MainControlOperations _controlNotify = new control.MainControlOperations();
        
        private volatile MainForm _form;
        /// <summary>
        /// _state
        /// </summary>
        private RoboMagellanGUIState _state = new RoboMagellanGUIState();
        
        /// <summary>
        /// _main Port
        /// </summary>
        [ServicePort("/robomagellangui", AllowMultipleInstances=false)]
        private RoboMagellanGUIOperations _mainPort = new RoboMagellanGUIOperations();
        
        /// <summary>
        /// Default Service Constructor
        /// </summary>
        public RoboMagellanGUIService(DsspServiceCreationPort creationPort) : 
                base(creationPort)
        {
        }
        
        /// <summary>
        /// Service Start
        /// </summary>
        protected override void Start()
        {
			base.Start();
			// Add service specific initialization here.
            _form = new MainForm(_controlPort);
            //_form.Show();
            WinFormsServicePort.Post(new RunForm(
                delegate()
                {
                    return _form;
                }
            ));

            SubscribeToGPS();
            SubscribeToControl();
        }

        public void SubscribeToGPS()
        {
            //_form.writeToLog("Subscribing to GPS...\n");

            //Subscribe to GPS Service
            _gpsPort.Subscribe(_gpsNotify);

            //Install a notification handler
            Activate<ITask>(
                Arbiter.Receive<gps.UTMNotification>(true, _gpsNotify, NotifyUTMHandler)
                );

            //_form.writeToLog("Subscribed to GPS\n");
        }

        public void SubscribeToControl()
        {
            //_form.writeToLog("Subscribing to MainControl...\n");

            //Subscribe to Conrol Service
            _controlPort.Subscribe(_controlNotify);

            //Install a notification handler
            Activate<ITask>(
                Arbiter.Receive<control.StateNotification>(true, _controlNotify, NotifyControlHandler)
                );

            //_form.writeToLog("Subscribed to MainControl\n");
        }

        public void NotifyUTMHandler(gps.UTMNotification n)
        {
            //_form.writeToLog("Received GPS Update\n");
            gps.UTMData dataReceived = n.Body;
            _form.updateGPS(
                dataReceived.NumSat + "",
                dataReceived.Timestamp + "",
                dataReceived.East + "",
                dataReceived.North + ""
                );
        }

        public void NotifyControlHandler(control.StateNotification n)
        {
            //_form.writeToLog("Received Status Update\n");
            control.MainControlUpdateState dataReceived = n.Body;
            _form.updateControl(
                dataReceived._destination,
                dataReceived._destinations,
                dataReceived._state
                );

        }

        protected override void Shutdown()
        {
            _form.Dispose();
            base.Shutdown();
        }
        /// <summary>
        /// Get Handler
        /// </summary>
        /// <param name="get"></param>
        /// <returns></returns>
        [ServiceHandler(ServiceHandlerBehavior.Concurrent)]
        public virtual IEnumerator<ITask> GetHandler(Get get)
        {
            get.ResponsePort.Post(_state);
            yield break;
        }

        
    }
}
