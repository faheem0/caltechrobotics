//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.Ccr.Core;
using Microsoft.Dss.Core;
using Microsoft.Dss.Core.Attributes;
using Microsoft.Dss.ServiceModel.Dssp;
using Microsoft.Dss.ServiceModel.DsspServiceBase;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using W3C.Soap;
using robomagellan = RoboMagellan;
using gps = RoboMagellan.GenericGPS;
using gpsimpl = RoboMagellan.GPSImpl.Proxy;
namespace RoboMagellan
{
    
    
    /// <summary>
    /// Implementation class for MainControl
    /// </summary>
    [DisplayName("MainControl")]
    [Description("The MainControl Service")]
    [Contract(Contract.Identifier)]
    public class MainControlService : DsspServiceBase
    {
        public static double DISTANCE_THRESHOLD = 10;

        public static double ANGLE_THRESHOLD = 2;


        [Partner("Gps", Contract = gpsimpl.Contract.Identifier, CreationPolicy = PartnerCreationPolicy.UseExistingOrCreate)]
        private gps.GenericGPSOperations _gpsPort = new gps.GenericGPSOperations();
        private gps.GenericGPSOperations _gpsNotify = new gps.GenericGPSOperations();


        // NEEDS PARTNER!
        private engine.EngineOperations _enginePort = new engine.EngineOperations();
        private engine.EngineOperations _engineNotify = new engine.EngineNotify();


        /// <summary>
        /// _state
        /// </summary>
        private MainControlState _state = new MainControlState();
        
        /// <summary>
        /// _main Port
        /// </summary>
        [ServicePort("/maincontrol", AllowMultipleInstances=false)]
        private MainControlOperations _mainPort = new MainControlOperations();
        
        /// <summary>
        /// Default Service Constructor
        /// </summary>
        public MainControlService(DsspServiceCreationPort creationPort) : 
                base(creationPort)
        {
        }
        
        /// <summary>
        /// Service Start
        /// MODIFIES STATE!
        /// </summary>
        protected override void Start()
        {
			base.Start();
			// Add service specific initialization here.

            _state._destination = new gps.UTMData();
            _state._destination.East = 10;
            _state._destination.North = 10;


            Activate<ITask>(
                Arbiter.Receive<gps.UTMNotification>(true, _gpsNotify, NotifyUTMHandler)
                );

            _gpsPort.Subscribe(_gpsNotify);
        }

        // UPDATES STATE!
        // fix concurrency!
        public void NotifyUTMHandler(gps.UTMNotification n)
        {
            _location = n.Body;

            switch (_state._state)
            {
                case STATE_STOPPING :
                    return;
                    break;
                case STATE_STOPPED :
                    if (GetDistanceSquared(_state._destination, n.Body) < DISTANCE_THRESHOLD)
                    {
                        return;
                    }
                    else
                    {
                        double absoluteBearing = GetAbsoluteBearing(n.Body, _state._destination);

                        AbsoluteBearingUpdate u = new AbsoluteBearingUpdate(absoluteBearing);

                        
                        _state._state = STATE_TURNING;

                        _enginePort.Post(u);


                        Arbiter.Activate(Arbiter.Choice(u.ResponsePort, 
                            delegate(AbsoluteBearingUpdate a) {
                                _state._state = STATE_DRIVING;

                                _enginePort.Post(new DriveUpdate());
                            },
                            delegate(Exception ex) { _state._state = STATE_ERROR; }));
                        
                    }
                    break;
                case STATE_TURNING :
                    return;
                    break;
                case STATE_DRIVING :
                    if (GetDistanceSquared(_state._destination, n.Body) < DISTANCE_THRESHOLD)
                    {
                        StopUpdate up = new StopUpdate();

                        state._state = STATE_STOPPING;

                        _enginePort.Post(up);

                        Arbiter.Activate(Arbiter.Choice(u.ResponsePort,
                            delegate(StopUpdate a) { _state._state = STATE_STOPPED; },
                            delegate(Exception ex) { _state._state = STATE_ERROR; }));
                        
                    }
                    else
                    {
                        return;
                    }
                    break;
                case STATE_ERROR :
                    return;
                    break;
            }
        }

        public double GetDistance(gps.UTMData a, gps.UTMData b)
        {
            return Math.Sqrt(GetDistanceSquared(a, b));
        }

        public double GetDistanceSquared(gps.UTMData a, gps.UTMData b)
        {
            return (b.East - a.East) ^ 2 + (b.North - a.North) ^ 2;
        }
        public double GetAbsoluteBearing(gps.UTMData loc, gps.UTMData dest)
        {
            double dx = dest.East - loc.East;
            double dy = dest.North - loc.North;

            return 180 * (Math.Atan(dy / dx) / Math.PI);
        }

        /// <summary>
        /// Get Handler
        /// </summary>
        /// <param name="get"></param>
        /// <returns></returns>
        [ServiceHandler(ServiceHandlerBehavior.Concurrent)]
        public virtual IEnumerator<ITask> GetHandler(Get get)
        {
            get.ResponsePort.Post(_state);
            yield break;
        }
    }
}
