//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.Ccr.Core;
using Microsoft.Dss.Core;
using Microsoft.Dss.Core.Attributes;
using Microsoft.Dss.ServiceModel.Dssp;
using Microsoft.Dss.ServiceModel.DsspServiceBase;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using W3C.Soap;
using robomagellan = RoboMagellan;
using generic = RoboMagellan.GenericGPS.Proxy;

namespace RoboMagellan.GPSImpl
{


    /// <summary>
    /// Implementation class for Gpsimpl
    /// </summary>
    [DisplayName("Gpsimpl")]
    [Description("The Gpsimpl Service")]
    [Contract(Contract.Identifier)]
    [AlternateContract(generic.Contract.Identifier)]
    public class GpsimplService : DsspServiceBase
    {

        /// <summary>
        /// _state
        /// </summary>
        private generic.GenericGPSState _state = new generic.GenericGPSState();

        /// <summary>
        /// _main Port
        /// </summary>
        [ServicePort("/gpsimpl", AllowMultipleInstances = false)]
        private generic.GenericGPSOperations _mainPort = new generic.GenericGPSOperations();

        /// <summary>
        /// Default Service Constructor
        /// </summary>
        public GpsimplService(DsspServiceCreationPort creationPort) :
            base(creationPort)
        {
            _state.Coords = new generic.GPSCoordinatesUTM();
            _state.Coords.Easting = 0;
            _state.Coords.Northing = 0;
            _state.Timestamp = 0;
        }

        /// <summary>
        /// Service Start
        /// </summary>
        protected override void Start()
        {
            base.Start();
            // Add service specific initialization here.
            OnStartup();
        }

        /// <summary>
        /// Get Handler
        /// </summary>
        /// <param name="get"></param>
        /// <returns></returns>
        [ServiceHandler(ServiceHandlerBehavior.Exclusive)]
        public virtual IEnumerator<ITask> GetHandler(generic.Get get)
        {
            get.ResponsePort.Post(_state);
            _state.Coords.Easting = 1;
            _state.Coords.Northing = 1;
            _state.Timestamp = 1;
            yield break;
        }



        private Port<DateTime> _timerPort = new Port<DateTime>();
        private void OnStartup()
        {
            Activate(Arbiter.Receive(true, _timerPort, delegate(DateTime time)
            {
                LogInfo("Stamp2 " + time + ": " + _state.Timestamp);
                Activate(Arbiter.Receive(false, TimeoutPort(1000), delegate(DateTime t)
                {
                    _timerPort.Post(new DateTime());
                }));
            }));
            _timerPort.Post(new DateTime());
        }
    }
}
