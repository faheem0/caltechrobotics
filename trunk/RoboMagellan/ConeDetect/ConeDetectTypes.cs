//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.Ccr.Core;
using Microsoft.Dss.Core.Attributes;
using Microsoft.Dss.ServiceModel.Dssp;
using System.Drawing;
using System;
using System.Collections.Generic;
using W3C.Soap;
using conedetect = RoboMagellan.ConeDetect;
using System.ComponentModel;


namespace RoboMagellan.ConeDetect
{
    
    
    /// <summary>
    /// ConeDetect Contract class
    /// </summary>
    public sealed class Contract
    {
        
        /// <summary>
        /// The Dss Service contract
        /// </summary>
        public const String Identifier = "http://schemas.tempuri.org/2008/05/conedetect.html";
    }
    public struct CamCalibrate
    {
        private Color _c;
        [DataMember]
        public Color Color
        {
            get { return _c; }
            set { _c = value; }
        }
    }
    public struct Density_Check
    {
        public Rectangle r;
        public bool pass;
    }

    public struct CamData
    {
        private long _timestamp;
        private bool _detected;
        private int _x;
        private int _y;
        private int _angle;
        private Rectangle _box;
        private Bitmap _image;

        [DataMember]
        public long Timestamp
        {
            get { return _timestamp; }
            set { _timestamp = value; }
        }

        [DataMember]
        public bool Detected
        {
            get { return _detected; }
            set { _detected = value; }
        }

        [DataMember]
        public int X
        {
            get { return _x; }
            set { _x = value; }
        }

        [DataMember]
        public int Y
        {
            get { return _y; }
            set { _y = value; }
        }

        [DataMember]
        public Rectangle Box
        {
            get { return _box; }
            set { _box = value; }

        }
        [DataMember]
        public int Angle
        {
            get { return _angle; }
            set { _angle = value; }
        }

        [DataMember]
        public Bitmap Image
        {
            get { return _image; }
            set { _image = value; }
        }
    }

    public class ConeNotification : Update<CamData, DsspResponsePort<DefaultUpdateResponseType>>
    {
        public ConeNotification(CamData d) { this.Body = d; }

        public ConeNotification() { }
    }

    /// <summary>
    /// The ConeDetect State
    /// </summary>
    [DataContract()]
    public class ConeDetectState
    {

        /// <summary>
        /// Webcam LOS
        /// </summary>
        [DataMember]
        [Description("Specifies the half angle LOS of Webcam.")]
        public const int MAX_ANGLE = 160;

    }
    
    /// <summary>
    /// ConeDetect Main Operations Port
    /// </summary>
    [ServicePort()]
    public class ConeDetectOperations : PortSet<DsspDefaultLookup, 
                                                DsspDefaultDrop, 
                                                Get,
                                                Subscribe,
                                                ConeNotification,
                                                Calibrate
                                                >
    {
    }

    public class Calibrate : Submit<CamCalibrate, DsspResponsePort<DefaultSubmitResponseType>>
    {
        public Calibrate() { }
        public Calibrate(CamCalibrate a) { this.Body = a; }
    }

    public class Subscribe : Subscribe<SubscribeRequestType, PortSet<SubscribeResponseType, Fault>, ConeDetectOperations> { }
    /// <summary>
    /// ConeDetect Get Operation
    /// </summary>
    public class Get : Get<GetRequestType, PortSet<ConeDetectState, Fault>>
    {
        
        /// <summary>
        /// ConeDetect Get Operation
        /// </summary>
        public Get()
        {
        }
        
        /// <summary>
        /// ConeDetect Get Operation
        /// </summary>
        public Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body)
        {
        }
        
        /// <summary>
        /// ConeDetect Get Operation
        /// </summary>
        public Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, Microsoft.Ccr.Core.PortSet<ConeDetectState,W3C.Soap.Fault> responsePort) : 
                base(body, responsePort)
        {
        }


    }
    [DataContract]
    public class ColorVector
    {
        /// <summary>
        /// Normalized Red Component
        /// </summary>
        [Description("Indicates the normalized Red value = Red/(Red+Green+Blue).\n(Range = 0.0-1.0)")]
        [DataMember]
        public double Red;
        /// <summary>
        /// Normalized Green Component
        /// </summary>
        [Description("Indicates the normalized Green value = Green/(Red+Green+Blue).\n(Range = 0.0-1.0)")]
        [DataMember]
        public double Green;
        /// <summary>
        /// Normalized Blue Component
        /// </summary>
        [Description("Indicates the normalized Blue value = Blue/(Red+Green+Blue).\n(Range = 0.0-1.0)")]
        [DataMember]
        public double Blue;

        /// <summary>
        /// Similarity Threshold Value 
        /// </summary>
        [Description("Indicates the similarity threshold value; comparing two color vectors.\n(Typical range = 0.9~1.0)")]
        [DataMember]
        public double SimilarityMeasure;

        /// <summary>
        /// Constructor
        /// </summary>
        public ColorVector()
        {
            SimilarityMeasure = 0.995;
        }
        /// <summary>
        /// Constructor with red, green
        /// </summary>
        public ColorVector(double red, double green)
        {
            Red = red;
            Green = green;
            SimilarityMeasure = 0.995;
        }
        /// <summary>
        /// Constructor with red, green, blue
        /// </summary>
        public ColorVector(double red, double green, double blue)
        {
            Red = red;
            Green = green;
            Blue = blue;
            SimilarityMeasure = 0.995;
        }
        /// <summary>
        /// Constructor with red, green, blue, similarity
        /// </summary>
        public ColorVector(double red, double green, double blue, double similarity)
        {
            Red = red;
            Green = green;
            Blue = blue;
            SimilarityMeasure = similarity;
        }
        /// <summary>
        /// Return the Magnitude of the vector
        /// </summary>
        public double Magnitude()
        {
            return Math.Sqrt(Red * Red + Green * Green + Blue * Blue);
        }
        /// <summary>
        /// Return the Dot Product of two Vectors
        /// </summary>
        public static double DotProduct(ColorVector cv1, ColorVector cv2)
        {
            if (cv1 == null)
                return 0;
            if (cv2 == null)
                return 0;

            return (cv1.Red * cv2.Red) + (cv1.Green * cv2.Green) + (cv1.Blue * cv2.Blue);
        }
        /// <summary>
        /// Calculate the similarity between two color vectors
        /// </summary>
        public static double CompareSimilarity(ColorVector cv1, ColorVector cv2)
        {
            if (cv1 == null)
                return 0;
            if (cv2 == null)
                return 0;

            double mag = (cv1.Magnitude() * cv2.Magnitude());
            if (mag != 0)
                return (DotProduct(cv1, cv2) / mag);
            return 0;
        }
    }
}
