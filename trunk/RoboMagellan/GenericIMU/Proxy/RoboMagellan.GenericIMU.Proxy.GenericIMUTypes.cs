//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.Ccr.Core;
using Microsoft.Dss.Core;
using Microsoft.Dss.Core.Attributes;
using Microsoft.Dss.ServiceModel.Dssp;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml.Serialization;
using W3C.Soap;
using compression = System.IO.Compression;
using constructor = Microsoft.Dss.Services.Constructor;
using contractmanager = Microsoft.Dss.Services.ContractManager;
using contractmodel = Microsoft.Dss.Services.ContractModel;
using dssphttp = Microsoft.Dss.Core.DsspHttp;
using io = System.IO;
using pxgenericimu = RoboMagellan.GenericIMU.Proxy;
using reflection = System.Reflection;


namespace RoboMagellan.GenericIMU.Proxy
{
    
    
    /// <summary>
    /// GenericIMU Contract
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public sealed class Contract
    {
        
        /// The Unique Contract Identifier for the GenericIMU service
        public const String Identifier = "http://schemas.tempuri.org/2008/03/genericimu.html";
        
        /// The Dss Service dssModel Contract(s)
        public static List<contractmodel.ServiceSummary> ServiceModel()
        {
            contractmanager.ServiceSummaryLoader loader = new contractmanager.ServiceSummaryLoader();
            return loader.GetServiceSummaries(typeof(Contract).Assembly);

        }
        
        /// <summary>
        /// Creates an instance of the service associated with this contract
        /// </summary>
        /// <param name="contructorServicePort">Contractor Service that will create the instance</param>
        /// <param name="partners">Optional list of service partners for new service instance</param>
        /// <returns>Result PortSet for retrieving service creation response</returns>
        public static DsspResponsePort<CreateResponse> CreateService(constructor.ConstructorPort contructorServicePort, params PartnerType[] partners)
        {
            DsspResponsePort<CreateResponse> result = new DsspResponsePort<CreateResponse>();
            ServiceInfoType si = new ServiceInfoType(Contract.Identifier, null);
            if (partners != null)
            {
                si.PartnerList = new List<PartnerType>(partners);
            }
            Microsoft.Dss.Services.Constructor.Create create =
                new Microsoft.Dss.Services.Constructor.Create(si, result);
            contructorServicePort.Post(create);
            return result;

        }
        
        /// <summary>
        /// Creates an instance of the service associated with this contract
        /// </summary>
        /// <param name="contructorServicePort">Contractor Service that will create the instance</param>
        /// <returns>Result PortSet for retrieving service creation response</returns>
        public static DsspResponsePort<CreateResponse> CreateService(constructor.ConstructorPort contructorServicePort)
        {
            return Contract.CreateService(contructorServicePort, null);
        }
    }
    
    /// <summary>
    /// Specified the state of a IMU service
    /// </summary>
    [DisplayName("Generic IMU State")]
    [Description("Specified the state of a IMU service")]
    [DataContract()]
    [XmlRootAttribute("GenericIMUState", Namespace="http://schemas.tempuri.org/2008/03/genericimu.html")]
    public class GenericIMUState : ICloneable, IDssSerializable
    {
        
        private IMUData _data;
        
        /// <summary>
        /// Data
        /// </summary>
        [DataMember()]
        [DisplayName("Current Data from IMU")]
        [Description("This represents the current angle and data")]
        public IMUData Data
        {
            get
            {
                return this._data;
            }
            set
            {
                this._data = value;
            }
        }
        
        /// <summary>
        /// Copy To GenericIMU State
        /// </summary>
        public virtual void CopyTo(IDssSerializable target)
        {
            GenericIMUState typedTarget = target as GenericIMUState;

            if (typedTarget == null)
                throw new ArgumentException("CopyTo({0}) requires type {0}", this.GetType().FullName);
            typedTarget.Data = this.Data;
        }
        
        /// <summary>
        /// Clone Generic IMU State
        /// </summary>
        public virtual object Clone()
        {
            GenericIMUState target = new GenericIMUState();

            target.Data = this.Data;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public virtual void Serialize(System.IO.BinaryWriter writer)
        {
            ((Microsoft.Dss.Core.IDssSerializable)Data).Serialize(writer);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public virtual object Deserialize(System.IO.BinaryReader reader)
        {
            Data = (IMUData)((Microsoft.Dss.Core.IDssSerializable)new IMUData()).Deserialize(reader);

            return this;

        }
    }
    
    /// <summary>
    /// IMU Data
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("IMUData", Namespace="http://schemas.tempuri.org/2008/03/genericimu.html")]
    public struct IMUData : ICloneable, IDssSerializable
    {
        
        private Single _angleX;
        
        private Single _angleY;
        
        private Single _angleZ;
        
        private Single _gyroX;
        
        private Single _gyroY;
        
        private Single _gyroZ;
        
        private Single _accelX;
        
        private Single _accelY;
        
        private Single _accelZ;
        
        /// <summary>
        /// AngleX
        /// </summary>
        [DataMember()]
        public Single AngleX
        {
            get
            {
                return this._angleX;
            }
            set
            {
                this._angleX = value;
            }
        }
        
        /// <summary>
        /// AngleY
        /// </summary>
        [DataMember()]
        public Single AngleY
        {
            get
            {
                return this._angleY;
            }
            set
            {
                this._angleY = value;
            }
        }
        
        /// <summary>
        /// AngleZ
        /// </summary>
        [DataMember()]
        public Single AngleZ
        {
            get
            {
                return this._angleZ;
            }
            set
            {
                this._angleZ = value;
            }
        }
        
        /// <summary>
        /// GyroX
        /// </summary>
        [DataMember()]
        public Single GyroX
        {
            get
            {
                return this._gyroX;
            }
            set
            {
                this._gyroX = value;
            }
        }
        
        /// <summary>
        /// GyroY
        /// </summary>
        [DataMember()]
        public Single GyroY
        {
            get
            {
                return this._gyroY;
            }
            set
            {
                this._gyroY = value;
            }
        }
        
        /// <summary>
        /// GyroZ
        /// </summary>
        [DataMember()]
        public Single GyroZ
        {
            get
            {
                return this._gyroZ;
            }
            set
            {
                this._gyroZ = value;
            }
        }
        
        /// <summary>
        /// AccelX
        /// </summary>
        [DataMember()]
        public Single AccelX
        {
            get
            {
                return this._accelX;
            }
            set
            {
                this._accelX = value;
            }
        }
        
        /// <summary>
        /// AccelY
        /// </summary>
        [DataMember()]
        public Single AccelY
        {
            get
            {
                return this._accelY;
            }
            set
            {
                this._accelY = value;
            }
        }
        
        /// <summary>
        /// AccelZ
        /// </summary>
        [DataMember()]
        public Single AccelZ
        {
            get
            {
                return this._accelZ;
            }
            set
            {
                this._accelZ = value;
            }
        }
        
        /// <summary>
        /// Copy To IMU Data
        /// </summary>
        public void CopyTo(IDssSerializable target)
        {
            throw new ArgumentException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        /// Clone IMU Data
        /// </summary>
        public object Clone()
        {
            IMUData target = new IMUData();

            target.AngleX = this.AngleX;
            target.AngleY = this.AngleY;
            target.AngleZ = this.AngleZ;
            target.GyroX = this.GyroX;
            target.GyroY = this.GyroY;
            target.GyroZ = this.GyroZ;
            target.AccelX = this.AccelX;
            target.AccelY = this.AccelY;
            target.AccelZ = this.AccelZ;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public void Serialize(System.IO.BinaryWriter writer)
        {
            writer.Write(AngleX);

            writer.Write(AngleY);

            writer.Write(AngleZ);

            writer.Write(GyroX);

            writer.Write(GyroY);

            writer.Write(GyroZ);

            writer.Write(AccelX);

            writer.Write(AccelY);

            writer.Write(AccelZ);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            AngleX = reader.ReadSingle();

            AngleY = reader.ReadSingle();

            AngleZ = reader.ReadSingle();

            GyroX = reader.ReadSingle();

            GyroY = reader.ReadSingle();

            GyroZ = reader.ReadSingle();

            AccelX = reader.ReadSingle();

            AccelY = reader.ReadSingle();

            AccelZ = reader.ReadSingle();

            return this;

        }
    }
    
    /// <summary>
    /// GenericIMU Operations
    /// </summary>
    [ServicePort()]
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class GenericIMUOperations : PortSet<Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, Get, Subscribe, dssphttp.HttpGet, dssphttp.HttpPost, IMUNotification>
    {
        
        /// <summary>
        /// Required Lookup request body type
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.LookupResponse,Fault> DsspDefaultLookup()
        {
            Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Dssp Default Lookup and return the response port.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.LookupResponse,Fault> DsspDefaultLookup(Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body)
        {
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// A request to drop the service.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType,Fault> DsspDefaultDrop()
        {
            Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Dssp Default Drop and return the response port.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType,Fault> DsspDefaultDrop(Microsoft.Dss.ServiceModel.Dssp.DropRequestType body)
        {
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Required Get body type
        /// </summary>
        public virtual PortSet<GenericIMUState,Fault> Get()
        {
            Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            Get op = new Get(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Get and return the response port.
        /// </summary>
        public virtual PortSet<GenericIMUState,Fault> Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body)
        {
            Get op = new Get();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Subscribe and return the response port.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType,Fault> Subscribe(IPort notificationPort)
        {
            Subscribe op = new Subscribe();
            op.Body = new Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            op.NotificationPort = notificationPort;
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Subscribe and return the response port.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType,Fault> Subscribe(Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, IPort notificationPort)
        {
            Subscribe op = new Subscribe();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            op.NotificationPort = notificationPort;
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// DsspHttp Get request body
        /// </summary>
        public virtual PortSet<dssphttp.HttpResponseType,Fault> HttpGet()
        {
            dssphttp.HttpGetRequestType body = new dssphttp.HttpGetRequestType();
            dssphttp.HttpGet op = new dssphttp.HttpGet(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Http Get and return the response port.
        /// </summary>
        public virtual PortSet<dssphttp.HttpResponseType,Fault> HttpGet(dssphttp.HttpGetRequestType body)
        {
            dssphttp.HttpGet op = new dssphttp.HttpGet();
            op.Body = body ?? new dssphttp.HttpGetRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// DsspHttp Post request body
        /// </summary>
        public virtual PortSet<dssphttp.HttpResponseType,Fault> HttpPost()
        {
            dssphttp.HttpPostRequestType body = new dssphttp.HttpPostRequestType();
            dssphttp.HttpPost op = new dssphttp.HttpPost(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Http Post and return the response port.
        /// </summary>
        public virtual PortSet<dssphttp.HttpResponseType,Fault> HttpPost(dssphttp.HttpPostRequestType body)
        {
            dssphttp.HttpPost op = new dssphttp.HttpPost();
            op.Body = body ?? new dssphttp.HttpPostRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// IMU Data
        /// </summary>
        public virtual Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> IMUNotification()
        {
            IMUData body = new IMUData();
            IMUNotification op = new IMUNotification(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post IMU Notification and return the response port.
        /// </summary>
        public virtual Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> IMUNotification(IMUData body)
        {
            IMUNotification op = new IMUNotification();
            op.Body = body;
            this.Post(op);
            return op.ResponsePort;

        }
    }
    
    /// <summary>
    /// Get
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : Microsoft.Dss.ServiceModel.Dssp.Get<Microsoft.Dss.ServiceModel.Dssp.GetRequestType, PortSet<GenericIMUState, Fault>>
    {
        
        /// <summary>
        /// Get
        /// </summary>
        public Get()
        {
        }
        
        /// <summary>
        /// Get
        /// </summary>
        public Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body)
        {
        }
        
        /// <summary>
        /// Get
        /// </summary>
        public Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, Microsoft.Ccr.Core.PortSet<GenericIMUState,W3C.Soap.Fault> responsePort) : 
                base(body, responsePort)
        {
        }
    }
    
    /// <summary>
    /// Subscribe
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : Microsoft.Dss.ServiceModel.Dssp.Subscribe<Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, PortSet<Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, Fault>, GenericIMUOperations>
    {
        
        /// <summary>
        /// Subscribe
        /// </summary>
        public Subscribe()
        {
        }
        
        /// <summary>
        /// Subscribe
        /// </summary>
        public Subscribe(Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body)
        {
        }
        
        /// <summary>
        /// Subscribe
        /// </summary>
        public Subscribe(Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, Microsoft.Ccr.Core.PortSet<Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType,W3C.Soap.Fault> responsePort) : 
                base(body, responsePort)
        {
        }
        
        /// <summary>
        /// Subscribe
        /// </summary>
        public Subscribe(Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, Microsoft.Ccr.Core.PortSet<Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType,W3C.Soap.Fault> responsePort, GenericIMUOperations notificationPort) : 
                base(body, responsePort, notificationPort)
        {
        }
    }
    
    /// <summary>
    /// IMU Notification
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class IMUNotification : Microsoft.Dss.ServiceModel.Dssp.Update<IMUData, Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType>>
    {
        
        /// <summary>
        /// IMU Notification
        /// </summary>
        public IMUNotification()
        {
        }
        
        /// <summary>
        /// IMU Notification
        /// </summary>
        public IMUNotification(IMUData body) : 
                base(body)
        {
        }
        
        /// <summary>
        /// IMU Notification
        /// </summary>
        public IMUNotification(IMUData body, Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> responsePort) : 
                base(body, responsePort)
        {
        }
    }
}
