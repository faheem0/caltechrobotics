8086/87/88/186 MACRO ASSEMBLER    DMA                                                      21:13:40  06/18/:8  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE DMA
OBJECT MODULE PLACED IN DMA.OBJ
ASSEMBLER INVOKED BY:  C:\ASMSTU~1\ASM86.EXE DMA.ASM M1 DB EP


LOC  OBJ                  LINE     SOURCE

                             1            NAME  dma
                             2     
                             3     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4     ;                                                                            ;
                             5     ;                                    DMA                                     ;
                             6     ;                              DMA Functions                                         
                                   ;
                             7     ;                                                                            ;
                             8     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9     
                            10     ; Description:      This program contains the functions to interface the IDE
                            11     ;                               harddrive with the mp3 player by using the 80188's bu
                                   ilt in 
                            12     ;                               DMA to transfer data to DRAM.
                            13     ; Input:            data read IDE harddrive
                            14     ; Output:           data written to DRAM
                            15     ; User Interface:   call functions:
                            16     ;                               InitDMA()
                            17     ;                               get_blocks(startAddr, numBlocks, destAddr)
                            18     ;                               
                            19     ; Error Handling:   None.
                            20     ; Algorithms:       None.
                            21     ; Data Structures:  None.
                            22     ;
                            23     ; Revision History:
                            24     ;     5/30/08  Samuel Yang     file started
                            25     ;         6/6/08   Samuel Yang          fixing stuff and comments updated, untested
                            26     CGROUP GROUP CODE
                            27     DGROUP GROUP DATA
                            28     
                            29     ; local include files
                            30 +1  $INCLUDE(dma.INC)
                      =1    31     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    32     ;                                                                            ;
                      =1    33     ;                                  dma.INC                                       ;
                      =1    34     ;                              DMA constants                                 ;
                      =1    35     ;                                 Include File                               ;
                      =1    36     ;                                                                            ;
                      =1    37     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    38     
                      =1    39     ; This file contains the definitions for the DMA program (dma.ASM).
                      =1    40     ; 
                      =1    41     ;
                      =1    42     ; Revision History:
                      =1    43     
                      =1    44     ;     5/30/2008 Samuel Yang     
                      =1    45     
                      =1    46     
  0000                =1    47     IDEoffset         EQU     0000H                  ;no longer needed, must be 0 for com
                                   patibility
8086/87/88/186 MACRO ASSEMBLER    DMA                                                      21:13:40  06/18/:8  PAGE    2


LOC  OBJ                  LINE     SOURCE

                      =1    48     
  0100                =1    49     IDE_BLOCK_SIZE EQU 256               ;words, must NOT change
                      =1    50     
                      =1    51                                                                                     ;Regi
                                   ster addresses, masks, and values
  FFC6                =1    52     D0DSTHaddr        EQU     0ffc6H                 ;address of dest address pointer (hi
                                   gh)
  FFC4                =1    53     D0DSTLaddr        EQU     0ffc4H                 ;address of dest address pointer (lo
                                   w)
                      =1    54     
  FFC2                =1    55     D0SRCHaddr        EQU     0ffc2H                 ;address of src address pointer (hig
                                   h)
  FFC0                =1    56     D0SRCLaddr        EQU     0ffc0H                 ;address of src address pointer (low
                                   )
                      =1    57     
  0008                =1    58     D0SRCHvalue       EQU     0008H                  ;fixed address of IDE data
  0000                =1    59     D0SRCLvalue       EQU     0000H                  ;fixed address of IDE data
                      =1    60     
  FFCA                =1    61     D0CONaddr         EQU     0ffcaH                 ;address of DMA0 control register
                      =1    62     
  FFC8                =1    63     D0TCaddr          EQU     0ffc8H                 ;address of DMA0 terminal count regi
                                   ster
                      =1    64     
  000F                =1    65     D0SRCHmask    EQU     000fH          ;DMA0 Source Address Pointer (high)
                      =1    66                                                                                     ;mask
                                    off reserved bits
                      =1    67                                             ;000000000000----  reserved
                      =1    68                                             ;------------1111  address bits 19:16
  FFFF                =1    69     D0SRCLmask    EQU     0ffffH         ;DMA0 Source Address Pointer (high)
                      =1    70                                                                                     ;mask
                                    off reserved bits
                      =1    71                                             ;1111111111111111  address bits 15:0         
                                                                
  000F                =1    72     D0DSTHmask    EQU     000fH          ;DMA0 Destination Address Pointer (high)
                      =1    73                                                                                     ;mask
                                    off reserved bits
                      =1    74                                             ;000000000000----  reserved
                      =1    75                                             ;------------1111  address bits 19:16
  FFFF                =1    76     D0DSTLmask    EQU     0ffffH         ;DMA0 Destination Address Pointer (high)
                      =1    77                                                                                     ;mask
                                    off reserved bits
                      =1    78                                             ;1111111111111111  address bits 15:0         
                                                                
                      =1    79     
  B606                =1    80     D0CONvalue    EQU     0b606H         ;DMA0 Control Register-p270
                      =1    81                                                                                     ;1---
                                   ------------  dest. memory space   
                      =1    82                                                                                     ;-01-
                                   ------------  dest increment
                      =1    83                                                                                     ;---1
                                   ------------  source memory space
                      =1    84                                                                                     ;----
                                   01----------  src increment
                      =1    85                                                                                     ;----
                                   --1---------  terminate on TC
8086/87/88/186 MACRO ASSEMBLER    DMA                                                      21:13:40  06/18/:8  PAGE    3


LOC  OBJ                  LINE     SOURCE

                      =1    86                                                                                     ;----
                                   ---0--------  clear interrupt
                      =1    87                                                                                     ;----
                                   ----00------  unsynchronized
                      =1    88                                                                                     ;----
                                   ------0-----  set low priority
                      =1    89                                                                                     ;----
                                   -------0----  internal DMA disable
                      =1    90                                                                                     ;----
                                   --------0---  reserved
                      =1    91                                                                                     ;----
                                   ---------1--  enable modifying STRT
                      =1    92                                                                                     ;----
                                   ----------1-  start DMA channel
                      =1    93                                                                                     ;----
                                   -----------0  byte transfer
                      =1    94                                                                                     
  0200                =1    95     D0TCvalue     EQU       IDE_BLOCK_SIZE*2  ;convert # words to # bytes           
                                                                                              
                      =1    96                                                                                     
                      =1    97     ;IDE addresses-p28              
  8000                =1    98     IDEsegment                       EQU     8000H             ;IDE on MCS0
                      =1    99                                                                     
  2000                =1   100     IDEaddrFeatures          EQU     2000H         ;address of features register
  4000                =1   101     IDEaddrSectorcount   EQU     4000H         ;address of Sector Count register
  6000                =1   102     IDEaddrSectornumber  EQU     6000H         ;address of Sector Number register
  8000                =1   103     IDEaddrCylinderlow   EQU     8000H         ;address of Cylinder Low register
  A000                =1   104     IDEaddrCylinderhigh  EQU    0A000H         ;address of Cylinder High register
  C000                =1   105     IDEaddrDevicehead    EQU    0C000H         ;address of Device/Head register
  E000                =1   106     IDEaddrCommand           EQU    0E000H         ;address of Command register
  E000                =1   107     IDEaddrStatus            EQU    0E000H         ;address of Status register      
                                                                                                      
                      =1   108                                                                                     
                      =1   109                                                                                     
  00E0                =1   110     DeviceheadValue     EQU       0e0H    ;set IDEaddrDevicehead to LBA mode
                      =1   111                                                                                     ;1-1-
                                   ----  reserved
                      =1   112                                                                                     ;-1--
                                   ----  LBS addressing mode
                      =1   113                                                                                     ;---0
                                   ----  device 0
                      =1   114                                                                                     ;----
                                   0000  LBA bits 27:24
  0000                =1   115     CylinderHighValue   EQU        00H    ;set LBA bits
                      =1   116                                                                                     ;0000
                                   0000  LBA bits 23:16
  0000                =1   117     CylinderLowValue    EQU        00H    ;set LBA bits
                      =1   118                                                                                     ;0000
                                   0000  LBA bits 15:8
  0000                =1   119     SectorNumberValue   EQU        00H    ;set LBA bits
                      =1   120                                                                                     ;0000
                                   0000  LBA bits 7:0 
                      =1   121     
  0021                =1   122     IDECommandReadSectors  EQU     21H    ;read sectors without retries
                      =1   123     
8086/87/88/186 MACRO ASSEMBLER    DMA                                                      21:13:40  06/18/:8  PAGE    4


LOC  OBJ                  LINE     SOURCE

  0080                =1   124     IDEBusyFlagMask         EQU       080H     ;from status register                
                      =1   125                                                                                     ;1---
                                   ----  BSY-busy     
  0080                =1   126     IDEBusyState            EQU       080H     ;from status register                
                      =1   127                                                                                     ;1---
                                   ----  BSY-busy                                                                     
                                         
  00C0                =1   128     IDEDrdyFlagMask         EQU       0C0H     ;from status register                
                      =1   129                                                                                     ;1---
                                   ----  BSY-busy     
                      =1   130                                                                                     ;-1--
                                   ----  DRDY-device ready                                                            
                                                 
  0040                =1   131     IDEDrdyState            EQU               040H     ;from status register        
                                      
                      =1   132                                                                                     ;0---
                                   ----  BSY-busy cleared     
                      =1   133                                                                                     ;-1--
                                   ----  DRDY-device ready                                                    
                           134 +1  $INCLUDE(boolean.INC)
                      =1   135     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   136     ;                                                                            ;
                      =1   137     ;                                  boolean.INC                               ;
                      =1   138     ;                             Boolean Definitions                            ;
                      =1   139     ;                                 Include File                               ;
                      =1   140     ;                                                                            ;
                      =1   141     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   142     
                      =1   143     ; This file contains the boolean definitions for all of the assembly code for
                      =1   144     ;       the 80188 MP3 Player.
                      =1   145     ;
                      =1   146     ; Revision History:
                      =1   147     
                      =1   148     ;     5/2/2008 Samuel Yang     
                      =1   149     
                      =1   150     
  0001                =1   151     TRUE EQU 1h
  0000                =1   152     FALSE EQU 0h
                           153     
                           154     
----                       155     CODE SEGMENT PUBLIC 'CODE'
                           156     
                           157     ASSUME  CS:CGROUP, DS:DGROUP
                           158     
                           159     
                           160     ; InitDMA
                           161     ;
                           162     ; Description:       This procedure initializes everything required for DMA transfer 
                                   of
                           163     ;                               data from the IDE to DRAM.
                           164     ;
                           165     ; Operation:         Initializes variables
                           166     ; Arguments:         None.
                           167     ; Return Value:      None.
                           168     ;
8086/87/88/186 MACRO ASSEMBLER    DMA                                                      21:13:40  06/18/:8  PAGE    5


LOC  OBJ                  LINE     SOURCE

                           169     ; Local Variables:   numBlocks, startOfBlocksHigh, startOfBlocksLow
                           170     ; Shared Variables:  None.
                           171     
                           172     ; Input:             None.
                           173     ; Output:            None.
                           174     ;
                           175     ; Error Handling:    None.
                           176     ;
                           177     ; Algorithms:        None.
                           178     ; Data Structures:   None.
                           179     ;
                           180     ; Registers Changed: None.
                           181     ; Stack Depth:       0
                           182     ;
                           183     ; Last Modified:     6-6-2008
0000                       184     InitDMA PROC NEAR
                           185             PUBLIC InitDMA
0000 C70600000000   R      186                     MOV numBlocks, 0
0006 C70602000000   R      187                     MOV startOfBlocksHigh, 0
000C C70604000000   R      188                     MOV startOfBlocksLow, 0
0012 C3                    189             RET
                           190     InitDMA ENDP
                           191     
                           192     ; get_blocks
                           193     ;
                           194     ; Description:       This procedure gets data from the IDE and moves it into DRAM.
                           195     ;
                           196     ; Operation:         The 80188's built in DMA transfer is used to transfer one block 
                                   at
                           197     ;                               a time.  First, IDE registers are set up and the data
                                    read into the IDE buffer;
                           198     ;                               then the DMA transfer is initiated, repeating until a
                                   ll blocks have been read.
                           199     ; Arguments:         start address of blocks (2 words)
                           200     ;                                        number of blocks (1 word)
                           201     ;'                                       destination address (2 words)
                           202     ; Return Value:      number of blocks read in AX
                           203     ;
                           204     ; Local Variables:   numBlocks, startOfBlocksHigh, startOfBlocksLow
                           205     ; Shared Variables:  None.
                           206     
                           207     ; Input:             Data read from IDE
                           208     ; Output:            Data written to DRAM
                           209     ;
                           210     ; Error Handling:    blocks until IDE isn't busy and data is ready
                           211     ;
                           212     ; Algorithms:        None.
                           213     ; Data Structures:   None.
                           214     ;
                           215     ; Registers Changed: AX
                           216     ; Stack Depth:       10 words
                           217     ;
                           218     ; Last Modified:     5-31-2008
0013                       219     get_blocks   PROC    NEAR
                           220                             PUBLIC get_blocks
8086/87/88/186 MACRO ASSEMBLER    DMA                                                      21:13:40  06/18/:8  PAGE    6


LOC  OBJ                  LINE     SOURCE

                           221                     
0013 55                    222                     PUSH BP
0014 8BEC                  223                     MOV BP, SP
0016 56                    224                     PUSH SI
0017 57                    225                     PUSH DI
0018 53                    226                     PUSH BX
0019 51                    227                     PUSH CX
001A 52                    228                     PUSH DX
001B 06                    229                     PUSH ES
                           230                     
                           231                     ;get arguments off the stack
001C 8B460A                232                     MOV AX, [BP+10]         ;offset of destination address
001F 8B5E0C                233                     MOV BX, [BP+12]         ;segment of destination address
0022 8B4E08                234                     MOV CX, [BP+8]          ;number of blocks to be received
0025 890E0000       R      235                     MOV numBlocks, CX
0029 FF360000       R      236                     PUSH numBlocks
002D 8B4E04                237                     MOV CX, [BP+4]          ;low word of start of blocks
0030 890E0400       R      238                     MOV startOfBlocksLow, CX
0034 8B4E06                239                     MOV CX, [BP+6]          ;high nibble of start of blocks
0037 890E0200       R      240                     MOV startOfBlocksHigh, CX
003B                       241     setDMAregs:     
                           242                                     
                           243                     ;convert segment, offset into 20 bit address
003B 8BCB                  244                     MOV CX, BX  ;save highest nibble of segment   
003D C1E90C                245                     SHR CX, 12  
0040 C1E304                246                     SHL BX, 4       ;prepare to add offset to lower part of segment
0043 03D8                  247                     ADD BX, AX      ;lower 16 bits of 20-bit address now in BX
0045 83D100                248                     ADC CX, 0       ;higher 4 bits of 20-bit address now in CX
                           249                     
                           250                     ;set DMA dest 20-bit address
0048 BAC6FF                251                     MOV DX, D0DSTHaddr
004B 8BC1                  252                     MOV AX, CX
004D EF                    253                     OUT DX, AX
004E BAC4FF                254                     MOV DX, D0DSTLaddr
0051 8BC3                  255                     MOV AX, BX
0053 EF                    256                     OUT DX, AX
                           257                     
                           258                     ;set DMA source 20-bit address (fixed IDE address)
0054 BAC2FF                259                     MOV DX, D0SRCHaddr
0057 B80800                260                     MOV AX, D0SRCHvalue
005A EF                    261                     OUT DX, AX
005B BAC0FF                262                     MOV DX, D0SRCLaddr
005E B80000                263                     MOV AX, D0SRCLvalue
0061 EF                    264                     OUT DX, AX
                           265                                     
                           266                     
                           267                     ;write LBA to IDE registers
0062 680080                268                     PUSH IDEsegment         ;use ES to reference IDE segment
0065 07                    269                     POP ES
                           270                     
                           271                     ;add IDE address offset
0066                       272     setIDEregs:
0066 8B1E0400       R      273                     MOV BX, startOfBlocksLow
006A 8B0E0200       R      274                     MOV CX, startOfBlocksHigh
006E 83C300                275                     ADD BX, IDEoffset               
8086/87/88/186 MACRO ASSEMBLER    DMA                                                      21:13:40  06/18/:8  PAGE    7


LOC  OBJ                  LINE     SOURCE

0071 83D100                276                     ADC CX, 0
0074 891E0400       R      277                     MOV startOfBlocksLow, BX
0078 890E0200       R      278                     MOV startOfBlocksHigh, CX
                           279                     
007C BE0060                280                     MOV SI, IDEaddrSectornumber
007F A10400         R      281                     MOV AX, startOfBlocksLow        
0082 E88100                282                     CALL checkIDEBusy
0085 268904                283             MOV ES:[SI], AX                 ;LBA 7:0, don't care about contents in AH, bu
                                   t word write is required
                           284                     
0088 BE0080                285                     MOV SI, IDEaddrCylinderlow
008B 8AC4                  286                     MOV AL, AH
008D E87600                287                     CALL checkIDEBusy
0090 268904                288             MOV ES:[SI], AX                 ;LBA 15:8
                           289                     
0093 BE00A0                290                     MOV SI, IDEaddrCylinderhigh
0096 A10200         R      291                     MOV AX, startOfBlocksHigh
0099 E86A00                292                     CALL checkIDEBusy
009C 268904                293             MOV ES:[SI], AX                 ;LBA 23:16
                           294                     
009F BE00C0                295                     MOV SI, IDEaddrDevicehead
00A2 B0E0                  296                     MOV AL, DeviceheadValue ;get control values
00A4 80E40F                297                     AND AH, 0FH                             ;mask off upper nibble
00A7 0AC4                  298                     OR AL, AH                               ;set LBA 27:24 bits
00A9 E85A00                299                     CALL checkIDEBusy
00AC 268904                300             MOV ES:[SI], AX                 ;LBA 27:24
                           301                     
                           302                     ;set IDE sector count
00AF BE0040                303                     MOV SI, IDEaddrSectorcount      
00B2 A10000         R      304                     MOV AX, numBlocks
00B5 E84E00                305                     CALL checkIDEBusy
00B8 268904                306             MOV ES:[SI], AX         ;writes byte only although value is a word
                           307     
00BB                       308     readSectors:            
                           309                     ;command IDE to read sectors
00BB BE00E0                310                     MOV SI, IDEaddrCommand
00BE B021                  311                     MOV AL, IDECommandReadSectors
00C0 E84300                312                     CALL checkIDEBusy
00C3 268904                313             MOV ES:[SI], AX 
00C6                       314     transferDMA: ;LOOP starts here
                           315                     ;reset DMA source 20-bit address (fixed IDE address)
00C6 BAC2FF                316                     MOV DX, D0SRCHaddr
00C9 B80800                317                     MOV AX, D0SRCHvalue
00CC EF                    318                     OUT DX, AX
00CD BAC0FF                319                     MOV DX, D0SRCLaddr
00D0 B80000                320                     MOV AX, D0SRCLvalue
00D3 EF                    321                     OUT DX, AX
                           322                     
                           323                     ;set DMA terminal counter
00D4 BAC8FF                324                     MOV DX, D0TCaddr
00D7 B80002                325                     MOV AX, D0TCvalue
00DA EF                    326                     OUT DX, AX
                           327                     
                           328                     ;wait for data ready
00DB E84100                329                     CALL checkIDEDrdy
8086/87/88/186 MACRO ASSEMBLER    DMA                                                      21:13:40  06/18/:8  PAGE    8


LOC  OBJ                  LINE     SOURCE

                           330     
00DE                       331     startDMAtransfer:               
                           332                     ;start DMA tranfer
00DE BACAFF                333                     MOV DX, D0CONaddr
00E1 B806B6                334                     MOV AX, D0CONvalue
00E4 EF                    335                     OUT DX, AX
                           336                     
                           337                     ;do polling
00E5                       338     checkFinishedDMA:
00E5 BAC8FF                339                     MOV DX, D0TCaddr                ;check if terminal count has reached 
                                   0
00E8 ED                    340                     IN AX, DX
00E9 3D0000                341                     CMP AX, 0
00EC 75F7                  342                     JNE checkFinishedDMA
                           343                     
00EE A10000         R      344                     MOV AX, numBlocks
00F1 FEC8                  345                     DEC AL
00F3 32E4                  346                     XOR AH, AH                              ;ignore upper byte of numBloc
                                   ks
00F5 A30000         R      347                     MOV numBlocks, AX
                           348                     
00F8 3D0000                349                     CMP AX, 0
00FB 75C9                  350                     JNE transferDMA
00FD                       351     endGetBlocks:           
00FD 58                    352                     POP AX
00FE 07                    353                     POP ES
00FF 5A                    354                     POP DX
0100 59                    355                     POP CX
0101 5B                    356                     POP BX
0102 5F                    357                     POP DI
0103 5E                    358                     POP SI
0104 5D                    359                     POP BP
                           360                     
0105 C3                    361                     RET
                           362     get_blocks   ENDP
                           363     
                           364     ; checkIDEBusy
                           365     ;
                           366     ; Description:       This procedure checks if the IDE is busy
                           367     ;
                           368     ; Operation:         Blocks until busy flag is clear and device ready is set
                           369     ;
                           370     ; Arguments:         None.
                           371     ; Return Value:      None.
                           372     ;
                           373     ; Local Variables:   None.
                           374     ; Shared Variables:  None.
                           375     
                           376     ; Input:             IDE busy, device ready flag
                           377     ; Output:            None.
                           378     ;
                           379     ; Error Handling:    Blocking function
                           380     ;
                           381     ; Algorithms:        None.
                           382     ; Data Structures:   None.
8086/87/88/186 MACRO ASSEMBLER    DMA                                                      21:13:40  06/18/:8  PAGE    9


LOC  OBJ                  LINE     SOURCE

                           383     ;
                           384     ; Registers Changed: None
                           385     ; Stack Depth:       5 words
                           386     ;
                           387     ; Last Modified:     5-30-2008
0106                       388     checkIDEBusy   PROC    NEAR
                           389                             PUBLIC checkIDEBusy
0106 50                    390                             PUSH AX
0107 52                    391                             PUSH DX
0108 06                    392                             PUSH ES
0109 56                    393                             PUSH SI
010A                       394     checkBusy:                      
010A 680080                395                             PUSH IDEsegment
010D 07                    396                             POP ES
010E BE00E0                397                             MOV SI, IDEaddrStatus   ;read busy, device ready flag
0111 268B04                398                             MOV AX, ES:[SI]
0114 2480                  399                             AND AL, IDEBusyFlagMask
                           400                             
0116 3C80                  401                             CMP AL, IDEBusyState    ;if busy, then keep checking
0118 74F0                  402                             JE checkBusy
                           403                             
011A 5E                    404                             POP SI
011B 07                    405                             POP ES
011C 5A                    406                             POP DX
011D 58                    407                             POP AX
011E C3                    408                             RET
                           409     checkIDEBusy   ENDP
                           410     
                           411     ; checkIDEDrdy
                           412     ;
                           413     ; Description:       This procedure checks if IDE device ready flag is set
                           414     ;
                           415     ; Operation:         Blocks until device is ready
                           416     ;
                           417     ; Arguments:         None.
                           418     ; Return Value:      None.
                           419     ;
                           420     ; Local Variables:   None.
                           421     ; Shared Variables:  None.
                           422     
                           423     ; Input:            IDE device ready flag
                           424     ; Output:            None.
                           425     ;
                           426     ; Error Handling:    Blocking function
                           427     ;
                           428     ; Algorithms:        None.
                           429     ; Data Structures:   None.
                           430     ;
                           431     ; Registers Changed: None
                           432     ; Stack Depth:       5 words
                           433     ;
                           434     ; Last Modified:     5-30-2008
011F                       435     checkIDEDrdy PROC    NEAR
                           436                             PUBLIC checkIDEDrdy
011F 50                    437                             PUSH AX
8086/87/88/186 MACRO ASSEMBLER    DMA                                                      21:13:40  06/18/:8  PAGE   10


LOC  OBJ                  LINE     SOURCE

0120 52                    438                             PUSH DX
0121 06                    439                             PUSH ES
0122 56                    440                             PUSH SI
                           441     
0123                       442     checkDataReady:                 
0123 680080                443                             PUSH IDEsegment
0126 07                    444                             POP ES
0127 BE00E0                445                             MOV SI, IDEaddrStatus   ;read device ready flag
012A 268B04                446                             MOV AX, ES:[SI]
012D 24C0                  447                             AND AL, IDEDrdyFlagMask
                           448                             
012F 3C40                  449                             CMP AL, IDEDrdyState    ;if device not ready, then keep check
                                   ing
0131 75F0                  450                             JNE checkDataReady
                           451                             
0133 5E                    452                             POP SI
0134 07                    453                             POP ES
0135 5A                    454                             POP DX
0136 58                    455                             POP AX
0137 C3                    456                             RET
                           457     checkIDEDrdy   ENDP
                           458     
----                       459     CODE ENDS
                           460     
                           461     
----                       462     DATA    SEGMENT PUBLIC  'DATA'
0000 ????                  463     numBlocks                       DW      ?                       ;stores number of blo
                                   cks to read from IDE
0002 ????                  464     startOfBlocksHigh       DW      ?                       ;stores IDE LBA high word
0004 ????                  465     startOfBlocksLow        DW      ?                       ;stores IDE LBA low word
----                       466     DATA    ENDS
                           467     
                           468     
                           469     
                           470     
                           471             END     

ASSEMBLY COMPLETE, NO ERRORS FOUND
