8086/87/88/186 MACRO ASSEMBLER    DMA                                                      07:19:14  06/01/:8  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE DMA
OBJECT MODULE PLACED IN DMA.OBJ
ASSEMBLER INVOKED BY:  C:\ASMSTU~1\ASM86.EXE DMA.ASM M1 DB EP


LOC  OBJ                  LINE     SOURCE

                             1            NAME  dma
                             2     
                             3     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4     ;                                                                            ;
                             5     ;                                    DMA                                 ;
                             6     ;                           DMA Functions                            ;
                             7     ;                                                                            ;
                             8     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9     
                            10     ; Description:      This program contains the functions to
                            11     ;                       DMA
                            12     ;
                            13     ; Input:            data from IDE harddrive
                            14     ; Output:           data to DRAM
                            15     ; User Interface:   call functions:
                            16     ;                               get_blocks(startAddr, numBlocks, destAddr)
                            17     ;                               
                            18     ; Error Handling:   None.
                            19     ;
                            20     ; Algorithms:       None.
                            21     ; Data Structures:  None.
                            22     ;
                            23     ; Revision History:
                            24     ;     5/30/08  Samuel Yang     file started
                            25     CGROUP GROUP CODE
                            26     DGROUP GROUP DATA
                            27     
                            28     ; local include files
                            29 +1  $INCLUDE(dma.INC)
                      =1    30     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    31     ;                                                                            ;
                      =1    32     ;                                  dma.INC                                       ;
                      =1    33     ;                              DMA constants                                 ;
                      =1    34     ;                                 Include File                               ;
                      =1    35     ;                                                                            ;
                      =1    36     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    37     
                      =1    38     ; This file contains the definitions for the DMA functions(dma.ASM).
                      =1    39     ; 
                      =1    40     ;
                      =1    41     ; Revision History:
                      =1    42     
                      =1    43     ;     5/30/2008 Samuel Yang     
  003F                =1    44     IDEoffset         EQU     003fH                  ;for samsung IDE
                      =1    45     
                      =1    46     
  0100                =1    47     IDE_BLOCK_SIZE EQU 256               ;words, must NOT change
                      =1    48     
                      =1    49     
                      =1    50     
8086/87/88/186 MACRO ASSEMBLER    DMA                                                      07:19:14  06/01/:8  PAGE    2


LOC  OBJ                  LINE     SOURCE

                      =1    51     
                      =1    52                                                                                     ;Regi
                                   ster addresses, masks, and values
  FFC6                =1    53     D0DSTHaddr        EQU     0ffc6H                 ;address of dest address pointer (hi
                                   gh)
  FFC4                =1    54     D0DSTLaddr        EQU     0ffc4H                 ;address of dest address pointer (lo
                                   w)
                      =1    55     
  FFC2                =1    56     D0SRCHaddr        EQU     0ffc2H                 ;address of src address pointer (hig
                                   h)
  FFC0                =1    57     D0SRCLaddr        EQU     0ffc0H                 ;address of src address pointer (low
                                   )
                      =1    58     
  0008                =1    59     D0SRCHvalue       EQU     0008H                  ;fixed address of IDE data
  0000                =1    60     D0SRCLvalue       EQU     0000H                  ;fixed address of IDE data
                      =1    61     
  FFCA                =1    62     D0CONaddr         EQU     0ffcaH                 ;address of DMA0 control register
                      =1    63     
  FFC8                =1    64     D0TCaddr          EQU     0ffc8H                 ;address of DMA0 terminal count regi
                                   ster
                      =1    65     
  000F                =1    66     D0SRCHmask    EQU     000fH          ;DMA0 Source Address Pointer (high)
                      =1    67                                                                                     ;mask
                                    off reserved bits
                      =1    68                                             ;000000000000----  reserved
                      =1    69                                             ;------------1111  address bits 19:16
  FFFF                =1    70     D0SRCLmask    EQU     0ffffH         ;DMA0 Source Address Pointer (high)
                      =1    71                                                                                     ;mask
                                    off reserved bits
                      =1    72                                             ;1111111111111111  address bits 15:0         
                                                                
  000F                =1    73     D0DSTHmask    EQU     000fH          ;DMA0 Destination Address Pointer (high)
                      =1    74                                                                                     ;mask
                                    off reserved bits
                      =1    75                                             ;000000000000----  reserved
                      =1    76                                             ;------------1111  address bits 19:16
  FFFF                =1    77     D0DSTLmask    EQU     0ffffH         ;DMA0 Destination Address Pointer (high)
                      =1    78                                                                                     ;mask
                                    off reserved bits
                      =1    79                                             ;1111111111111111  address bits 15:0         
                                                                
                      =1    80     
  B606                =1    81     D0CONvalue    EQU     0b606H         ;DMA0 Control Register-p270
                      =1    82                                                                                     ;1---
                                   ------------  dest. memory space   
                      =1    83                                                                                     ;-01-
                                   ------------  dest increment
                      =1    84                                                                                     ;---1
                                   ------------  source memory space
                      =1    85                                                                                     ;----
                                   01----------  src increment
                      =1    86                                                                                     ;----
                                   --1---------  terminate on TC
                      =1    87                                                                                     ;----
                                   ---0--------  clear interrupt
8086/87/88/186 MACRO ASSEMBLER    DMA                                                      07:19:14  06/01/:8  PAGE    3


LOC  OBJ                  LINE     SOURCE

                      =1    88                                                                                     ;----
                                   ----00------  unsynchronized
                      =1    89                                                                                     ;----
                                   ------0-----  set low priority
                      =1    90                                                                                     ;----
                                   -------0----  internal DMA disable
                      =1    91                                                                                     ;----
                                   --------0---  reserved
                      =1    92                                                                                     ;----
                                   ---------1--  enable modifying STRT
                      =1    93                                                                                     ;----
                                   ----------1-  start DMA channel
                      =1    94                                                                                     ;----
                                   -----------0  byte transfer
                      =1    95                                                                                     
  0200                =1    96     D0TCvalue     EQU       IDE_BLOCK_SIZE*2  ;convert # words to # bytes           
                                                                                              
                      =1    97                                                                                     
                      =1    98     ;IDE addresses-p28              
  8000                =1    99     IDEsegment                       EQU     8000H             ;IDE on MCS0
                      =1   100                                                                     
  2000                =1   101     IDEaddrFeatures          EQU     2000H         ;address of features register
  4000                =1   102     IDEaddrSectorcount   EQU     4000H         ;address of Sector Count register
  6000                =1   103     IDEaddrSectornumber  EQU     6000H         ;address of Sector Number register
  8000                =1   104     IDEaddrCylinderlow   EQU     8000H         ;address of Cylinder Low register
  A000                =1   105     IDEaddrCylinderhigh  EQU    0A000H         ;address of Cylinder High register
  C000                =1   106     IDEaddrDevicehead    EQU    0C000H         ;address of Device/Head register
  E000                =1   107     IDEaddrCommand           EQU    0E000H         ;address of Command register
  E000                =1   108     IDEaddrStatus            EQU    0E000H         ;address of Status register      
                                                                                                      
                      =1   109                                                                                     
                      =1   110                                                                                     
  00E0                =1   111     DeviceheadValue     EQU       0e0H    ;set IDEaddrDevicehead to LBA mode
                      =1   112                                                                                     ;1-1-
                                   ----  reserved
                      =1   113                                                                                     ;-1--
                                   ----  LBS addressing mode
                      =1   114                                                                                     ;---0
                                   ----  device 0?
                      =1   115                                                                                     ;----
                                   0000  LBA bits 27:24
  0000                =1   116     CylinderHighValue   EQU        00H    ;set LBA bits
                      =1   117                                                                                     ;0000
                                   0000  LBA bits 23:16
  0000                =1   118     CylinderLowValue    EQU        00H    ;set LBA bits
                      =1   119                                                                                     ;0000
                                   0000  LBA bits 15:8
  0000                =1   120     SectorNumberValue   EQU        00H    ;set LBA bits
                      =1   121                                                                                     ;0000
                                   0000  LBA bits 7:0 
                      =1   122     
  0021                =1   123     IDECommandReadSectors  EQU     21H    ;read sectors without retries
                      =1   124     
  0080                =1   125     IDEBusyFlagMask         EQU       080H     ;from status register                
                      =1   126                                                                                     ;1---
8086/87/88/186 MACRO ASSEMBLER    DMA                                                      07:19:14  06/01/:8  PAGE    4


LOC  OBJ                  LINE     SOURCE

                                   ----  BSY-busy     
  0080                =1   127     IDEBusyState            EQU       080H     ;from status register                
                      =1   128                                                                                     ;1---
                                   ----  BSY-busy                                                                     
                                         
  00C0                =1   129     IDEDrdyFlagMask         EQU       0C0H     ;from status register                
                      =1   130                                                                                     ;1---
                                   ----  BSY-busy     
                      =1   131                                                                                     ;-1--
                                   ----  DRDY-device ready                                                            
                                                 
  0040                =1   132     IDEDrdyState            EQU               040H     ;from status register        
                                      
                      =1   133                                                                                     ;0---
                                   ----  BSY-busy cleared     
                      =1   134                                                                                     ;-1--
                                   ----  DRDY-device ready                                                    
                           135 +1  $INCLUDE(boolean.INC)
                      =1   136     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   137     ;                                                                            ;
                      =1   138     ;                                  boolean.INC                               ;
                      =1   139     ;                             Boolean Definitions                            ;
                      =1   140     ;                                 Include File                               ;
                      =1   141     ;                                                                            ;
                      =1   142     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   143     
                      =1   144     ; This file contains the boolean definitions for the 80188 MP3 Player.
                      =1   145     ;
                      =1   146     ; Revision History:
                      =1   147     
                      =1   148     ;     5/2/2008 Samuel Yang     
                      =1   149     
                      =1   150     
  0001                =1   151     TRUE EQU 1h
  0000                =1   152     FALSE EQU 0h
                           153     
                           154     
----                       155     CODE SEGMENT PUBLIC 'CODE'
                           156     
                           157             ASSUME  CS:CGROUP, DS:DGROUP
                           158     
                           159     
                           160     
                           161     
                           162     
                           163     ; InitDMA
                           164     ;
                           165     ; Description:       This procedure initializes everything for DMA between IDE and DR
                                   AM
                           166     ;
                           167     ; Operation:        
                           168     ;
                           169     ; Arguments:         None.
                           170     ; Return Value:      None.
                           171     ;
8086/87/88/186 MACRO ASSEMBLER    DMA                                                      07:19:14  06/01/:8  PAGE    5


LOC  OBJ                  LINE     SOURCE

                           172     ; Local Variables:   None.
                           173     ; Shared Variables:  None.
                           174     
                           175     ; Input:            None.
                           176     ; Output:            Initializes DMA.
                           177     ;
                           178     ; Error Handling:    None.
                           179     ;
                           180     ; Algorithms:        None.
                           181     ; Data Structures:   None.
                           182     ;
                           183     ; Registers Changed: None
                           184     ; Stack Depth:       2 words
                           185     ;
                           186     ; Last Modified:     5-30-2008
0000                       187     InitDMA   PROC    NEAR
                           188                             PUBLIC InitDMA
0000 50                    189                             PUSH AX
0001 52                    190                             PUSH DX
                           191                             
                           192                     
                           193                             
0002 5A                    194                             POP DX
0003 58                    195                             POP AX
0004 C3                    196                             RET
                           197     InitDMA   ENDP
                           198     
                           199     
                           200     ; get_blocks
                           201     ;
                           202     ; Description:       This procedure gets data from the IDE into the DRAM
                           203     ;
                           204     ; Operation:        Uses the 80188's built in DMA transfer.  Sets up IDE registers an
                                   d
                           205     ;                               DMA transfer, and blocks until transfer is complete.
                           206     ; Arguments:         start address of blocks (2 words) number of blocks (1 word), des
                                   tination address (2 words)
                           207     ; Return Value:      None.
                           208     ;
                           209     ; Local Variables:   numBlocks, startOfBlocksHigh, startOfBlocksLow
                           210     ; Shared Variables:  None.
                           211     
                           212     ; Input:            Data from IDE
                           213     ; Output:            Data to DRAM
                           214     ;
                           215     ; Error Handling:    None.
                           216     ;
                           217     ; Algorithms:        None.
                           218     ; Data Structures:   None.
                           219     ;
                           220     ; Registers Changed: None
                           221     ; Stack Depth:       10 words
                           222     ;
                           223     ; Last Modified:     5-31-2008
0005                       224     get_blocks   PROC    NEAR
8086/87/88/186 MACRO ASSEMBLER    DMA                                                      07:19:14  06/01/:8  PAGE    6


LOC  OBJ                  LINE     SOURCE

                           225                             PUBLIC get_blocks
                           226                     
0005 55                    227                     PUSH BP
0006 8BEC                  228                     MOV BP, SP
0008 56                    229                     PUSH SI
0009 57                    230                     PUSH DI
000A 50                    231                     PUSH AX
000B 53                    232                     PUSH BX
000C 51                    233                     PUSH CX
000D 52                    234                     PUSH DX
000E 06                    235                     PUSH ES
                           236                     
                           237                     ;get arguments off the stack
000F 8B460A                238                     MOV AX, [BP+10]         ;offset of destination address
0012 8B5E0C                239                     MOV BX, [BP+12]         ;segment of destination address
0015 8B4E08                240                     MOV CX, [BP+8]          ;number of blocks to be received
0018 890E0000       R      241                     MOV numBlocks, CX
001C 8B4E04                242                     MOV CX, [BP+4]          ;low word of start of blocks
001F 890E0400       R      243                     MOV startOfBlocksLow, CX
0023 8B4E06                244                     MOV CX, [BP+6]          ;high nibble of start of blocks
0026 890E0200       R      245                     MOV startOfBlocksHigh, CX
002A                       246     flag:           
                           247                                     
                           248                     ;convert segment, offset into 20 bit address
002A 8BCB                  249                     MOV CX, BX  ;save highest nibble of segment   
002C C1E90C                250                     SHR CX, 12  
002F C1E304                251                     SHL BX, 4       ;prepare to add offset to lower part of segment
0032 03D8                  252                     ADD BX, AX      ;lower 16 bits of 20-bit address now in BX
0034 83D100                253                     ADC CX, 0       ;higher 4 bits of 20-bit address now in CX
                           254                     
                           255                     ;set DMA dest 20-bit address
0037 BAC6FF                256                     MOV DX, D0DSTHaddr
003A 8BC1                  257                     MOV AX, CX
003C EF                    258                     OUT DX, AX
003D BAC4FF                259                     MOV DX, D0DSTLaddr
0040 8BC3                  260                     MOV AX, BX
0042 EF                    261                     OUT DX, AX
                           262                     
                           263                     ;set DMA source 20-bit address (fixed IDE address)
0043 BAC2FF                264                     MOV DX, D0SRCHaddr
0046 B80800                265                     MOV AX, D0SRCHvalue
0049 EF                    266                     OUT DX, AX
004A BAC0FF                267                     MOV DX, D0SRCLaddr
004D B80000                268                     MOV AX, D0SRCLvalue
0050 EF                    269                     OUT DX, AX
                           270                                     
                           271                     ;INIT IDE HERE
                           272                     ;write LBA to IDE registers
0051 680080                273                     PUSH IDEsegment ;use ES to reference IDE segment
0054 07                    274                     POP ES
                           275                     
                           276                     ;add IDE address offset
0055 8B1E0400       R      277                     MOV BX, startOfBlocksLow
0059 8B0E0200       R      278                     MOV CX, startOfBlocksHigh
005D 83C33F                279                     ADD BX, IDEoffset               
8086/87/88/186 MACRO ASSEMBLER    DMA                                                      07:19:14  06/01/:8  PAGE    7


LOC  OBJ                  LINE     SOURCE

0060 83D100                280                     ADC CX, 0
0063 891E0400       R      281                     MOV startOfBlocksLow, BX
0067 890E0200       R      282                     MOV startOfBlocksHigh, CX
                           283                     
006B BE0060                284                     MOV SI, IDEaddrSectornumber
006E A10400         R      285                     MOV AX, startOfBlocksLow        
0071 E88100                286                     CALL checkIDEBusy
0074 268904                287                     MOV ES:[SI], AX ;LBA 7:0, don't care about contents in AH, but word w
                                   rite is required
                           288                     
0077 BE0080                289                     MOV SI, IDEaddrCylinderlow
007A 8AC4                  290                     MOV AL, AH
007C E87600                291                     CALL checkIDEBusy
007F 268904                292                     MOV ES:[SI], AX ;LBA 15:8
                           293                     
0082 BE00A0                294                     MOV SI, IDEaddrCylinderhigh
0085 A10200         R      295                     MOV AX, startOfBlocksHigh
0088 E86A00                296                     CALL checkIDEBusy
008B 268904                297                     MOV ES:[SI], AX ;LBA 23:16
                           298                     
008E BE00C0                299                     MOV SI, IDEaddrDevicehead
0091 B0E0                  300                     MOV AL, DeviceheadValue ;get control values
0093 80E40F                301                     AND AH, 0FH                     ;mask off upper nibble
0096 0AC4                  302                     OR AL, AH                               ;set LBA 27:24 bits
0098 E85A00                303                     CALL checkIDEBusy
009B 268904                304                     MOV ES:[SI], AX         ;LBA 27:24
                           305                     
                           306                     ;set IDE sector count
009E BE0040                307                     MOV SI, IDEaddrSectorcount      
00A1 A10000         R      308                     MOV AX, numBlocks
00A4 E84E00                309                     CALL checkIDEBusy
00A7 268904                310                     MOV ES:[SI], AX         ;writes byte only although value is a word
                           311     
00AA                       312     readSectors:            
                           313                     ;command IDE to read sectors
00AA BE00E0                314                     MOV SI, IDEaddrCommand
00AD B021                  315                     MOV AL, IDECommandReadSectors
00AF E84300                316                     CALL checkIDEBusy
00B2 268904                317                     MOV ES:[SI], AX 
00B5                       318     transferDMA:
                           319                     ;reset DMA source 20-bit address (fixed IDE address)
00B5 BAC2FF                320                     MOV DX, D0SRCHaddr
00B8 B80800                321                     MOV AX, D0SRCHvalue
00BB EF                    322                     OUT DX, AX
00BC BAC0FF                323                     MOV DX, D0SRCLaddr
00BF B80000                324                     MOV AX, D0SRCLvalue
00C2 EF                    325                     OUT DX, AX
                           326                     
                           327                     ;set DMA terminal counter
00C3 BAC8FF                328                     MOV DX, D0TCaddr
00C6 B80002                329                     MOV AX, D0TCvalue
00C9 EF                    330                     OUT DX, AX
                           331                     
                           332                     ;wait for data ready
00CA E83700                333                     CALL checkIDEDrdy
8086/87/88/186 MACRO ASSEMBLER    DMA                                                      07:19:14  06/01/:8  PAGE    8


LOC  OBJ                  LINE     SOURCE

                           334     
00CD                       335     startDMAtransfer:               
                           336                     ;start DMA tranfer
00CD BACAFF                337                     MOV DX, D0CONaddr
00D0 B806B6                338                     MOV AX, D0CONvalue
00D3 EF                    339                     OUT DX, AX
                           340                     
                           341                     ;do polling
00D4                       342     checkFinishedDMA:
00D4 BAC8FF                343                     MOV DX, D0TCaddr                ;check if terminal count has reached 
                                   0
00D7 ED                    344                     IN AX, DX
00D8 3D0000                345                     CMP AX, 0
00DB 75F7                  346                     JNE checkFinishedDMA
                           347                     
00DD A10000         R      348                     MOV AX, numBlocks
00E0 FEC8                  349                     DEC AL
00E2 32E4                  350                     XOR AH, AH                              ;ignore upper byte of numBloc
                                   ks
00E4 A30000         R      351                     MOV numBlocks, AX
                           352                     
00E7 3D0000                353                     CMP AX, 0
00EA 75C9                  354                     JNE transferDMA
                           355                     
00EC 07                    356                     POP ES
00ED 5A                    357                     POP DX
00EE 59                    358                     POP CX
00EF 5B                    359                     POP BX
00F0 58                    360                     POP AX
00F1 5F                    361                     POP DI
00F2 5E                    362                     POP SI
00F3 5D                    363                     POP BP
                           364                     
                           365                     
00F4 C3                    366                     RET
                           367     get_blocks   ENDP
                           368     
                           369     ; checkIDEBusy
                           370     ;
                           371     ; Description:       This procedure checks if IDE busy flag is set
                           372     ;
                           373     ; Operation:        Blocks until busy flag is clear
                           374     ;
                           375     ; Arguments:         None.
                           376     ; Return Value:      None.
                           377     ;
                           378     ; Local Variables:   None.
                           379     ; Shared Variables:  None.
                           380     
                           381     ; Input:            IDE busy flag
                           382     ; Output:            None.
                           383     ;
                           384     ; Error Handling:    Blocking function
                           385     ;
                           386     ; Algorithms:        None.
8086/87/88/186 MACRO ASSEMBLER    DMA                                                      07:19:14  06/01/:8  PAGE    9


LOC  OBJ                  LINE     SOURCE

                           387     ; Data Structures:   None.
                           388     ;
                           389     ; Registers Changed: None
                           390     ; Stack Depth:       2 words
                           391     ;
                           392     ; Last Modified:     5-30-2008
00F5                       393     checkIDEBusy   PROC    NEAR
                           394                             PUBLIC checkIDEBusy
00F5 50                    395                             PUSH AX
00F6 52                    396                             PUSH DX
                           397     
00F7                       398     checkBusy:                      
00F7 BA00E0                399                             MOV DX, IDEaddrStatus   ;read busy, device ready flag
00FA EC                    400                             IN AL, DX
00FB 2480                  401                             AND AL, IDEBusyFlagMask
                           402                             
00FD 3C80                  403                             CMP AL, IDEBusyState    ;if busy, then keep checking
00FF 74F6                  404                             JE checkBusy
                           405                             
0101 5A                    406                             POP DX
0102 58                    407                             POP AX
0103 C3                    408                             RET
                           409     checkIDEBusy   ENDP
                           410     
                           411     ; checkIDEDrdy
                           412     ;
                           413     ; Description:       This procedure checks if IDE data ready flag is set
                           414     ;
                           415     ; Operation:        Blocks until data is ready
                           416     ;
                           417     ; Arguments:         None.
                           418     ; Return Value:      None.
                           419     ;
                           420     ; Local Variables:   None.
                           421     ; Shared Variables:  None.
                           422     
                           423     ; Input:            IDE data ready flag
                           424     ; Output:            None.
                           425     ;
                           426     ; Error Handling:    Blocking function
                           427     ;
                           428     ; Algorithms:        None.
                           429     ; Data Structures:   None.
                           430     ;
                           431     ; Registers Changed: None
                           432     ; Stack Depth:       2 words
                           433     ;
                           434     ; Last Modified:     5-30-2008
0104                       435     checkIDEDrdy PROC    NEAR
                           436                             PUBLIC checkIDEDrdy
0104 50                    437                             PUSH AX
0105 52                    438                             PUSH DX
                           439     
0106                       440     checkDataReady:                 
0106 BA00E0                441                             MOV DX, IDEaddrStatus   ;read device ready flag
8086/87/88/186 MACRO ASSEMBLER    DMA                                                      07:19:14  06/01/:8  PAGE   10


LOC  OBJ                  LINE     SOURCE

0109 EC                    442                             IN AL,DX
010A 24C0                  443                             AND AL, IDEDrdyFlagMask
                           444                             
010C 3C40                  445                             CMP AL, IDEDrdyState    ;if device not ready, then keep check
                                   ing
010E 75F6                  446                             JNE checkDataReady
                           447                             
0110 5A                    448                             POP DX
0111 58                    449                             POP AX
0112 C3                    450                             RET
                           451     checkIDEDrdy   ENDP
                           452     
----                       453     CODE ENDS
                           454     
                           455     
----                       456     DATA    SEGMENT PUBLIC  'DATA'
0000 ????                  457     numBlocks DW ?
0002 ????                  458     startOfBlocksHigh DW ?
0004 ????                  459     startOfBlocksLow DW ?
----                       460     DATA    ENDS
                           461     
                           462     
                           463     
                           464     
                           465             END     

ASSEMBLY COMPLETE, NO ERRORS FOUND
