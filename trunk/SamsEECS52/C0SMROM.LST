8086/87/88/186 MACRO ASSEMBLER    STARTUP                                                  23:27:36  06/08/:8  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE STARTUP
OBJECT MODULE PLACED IN C0SMROM.OBJ
ASSEMBLER INVOKED BY:  C:\ASMSTU~1\ASM86.EXE C0SMROM.ASM M1 DB EP


LOC  OBJ                  LINE     SOURCE

                             1             NAME    STARTUP
                             2     
                             3     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4     ;                                                                            ;
                             5     ;                                   C0SMROM                                  ;
                             6     ;                               Startup Template                             ;
                             7     ;                    Intel C Small Memory Model, ROM Option                  ;
                             8     ;                                                                            ;
                             9     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10     
                            11     ; This file contains a template for the startup code used when interfacing to
                            12     ; C code compiled with the Intel C compiler using the small memory model and
                            13     ; ROM option.  It assumes nothing about the system hardware, it's main purpose
                            14     ; is to setup the groups and segments correctly.  Note that most segments are
                            15     ; empty, they are present only for the GROUP definitions.  The actual startup
                            16     ; code for a system would include definitions for the global variables and all
                            17     ; of the system initialization.  Note that the CONST segment does not exist
                            18     ; for ROMmable code (it is automatically made part of the CODE segment by the
                            19     ; compiler).
                            20     ;
                            21     ;
                            22     ; Revision History:
                            23     ;    3/7/94   Glen George       Initial revision.
                            24     ;    2/28/95  Glen George       Fixed segment alignments.
                            25     ;                               Fixed SP initialization.
                            26     ;                               Removed CS:IP initialization (END Start -> END).
                            27     ;                               Updated comments.
                            28     ;    2/29/96  Glen George       Updated comments.
                            29     ;    2/24/98  Glen George       Updated comments.
                            30     ;   11/18/98  Glen George       Updated comments.
                            31     ;   12/26/99  Glen George       Changed formatting.
                            32     ;    1/30/02  Glen George       Added proper assume for ES.
                            33     ;    1/27/03  Glen George       Changed to looping if main() returns instead
                            34     ;                                  of halting.
                            35     ;   12/31/03  Glen George       Made Start public so can be accessed from
                            36     ;                                  power on segment.
                            37     ;   04/26/08 Samuel Yang            modified for his board
                            38     ;   05/30/08 Samuel Yang            DRAM, IDE, elapsed_time added, unested
                            39     
                            40 +1  $INCLUDE(boolean.INC)
                      =1    41     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    42     ;                                                                            ;
                      =1    43     ;                                  boolean.INC                               ;
                      =1    44     ;                             Boolean Definitions                            ;
                      =1    45     ;                                 Include File                               ;
                      =1    46     ;                                                                            ;
                      =1    47     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    48     
                      =1    49     ; This file contains the boolean definitions for the 80188 MP3 Player.
                      =1    50     ;
8086/87/88/186 MACRO ASSEMBLER    STARTUP                                                  23:27:36  06/08/:8  PAGE    2


LOC  OBJ                  LINE     SOURCE

                      =1    51     ; Revision History:
                      =1    52     
                      =1    53     ;     5/2/2008 Samuel Yang     
                      =1    54     
                      =1    55     
  0001                =1    56     TRUE EQU 1h
  0000                =1    57     FALSE EQU 0h
                            58 +1  $INCLUDE(regAddrs.INC)
                      =1    59     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    60     ;                                                                            ;
                      =1    61     ;                                  regAddrs.INC                              ;
                      =1    62     ;                              Register Addresses and Values                 ;
                      =1    63     ;                                 Include File                               ;
                      =1    64     ;                                                                            ;
                      =1    65     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    66     
                      =1    67     ; This file contains the definitions for the 801C88 MP3 Player.
                      =1    68     ;
                      =1    69     ;
                      =1    70     ; Revision History:
                      =1    71     
                      =1    72     ;     5/2/2008 Samuel Yang     
                      =1    73     
                      =1    74     
                      =1    75     
                      =1    76     
                      =1    77     
                      =1    78     ; Interrupt Vectors
  000C                =1    79     Int0Vec         EQU     12               ;interrupt vector for INT 0
  000D                =1    80     Int1Vec         EQU     13               ;interrupt vector for INT 1
                      =1    81     
                      =1    82     
                      =1    83     ; Interrupt Controller Definitions
                      =1    84     
                      =1    85     ; Addresses
  FF38                =1    86     INT0Ctrlr        EQU    0FF38H           ;address of interrupt 0 controller
  FF3A                =1    87     INT1Ctrlr        EQU    0FF3AH           ;address of interrupt 1 controller
  FF32                =1    88     INTCtrlrCtrl    EQU     0FF32H          ;address of interrupt controller for timer
  FF22                =1    89     INTCtrlrEOI     EQU     0FF22H          ;address of interrupt controller EOI register
                      =1    90     
                      =1    91     ; Register Values
  0001                =1    92     INTCtrlrCVal    EQU     00001H          ;set priority for timers to 1 and enable
                      =1    93                                             ;000000000000----  reserved
                      =1    94                                             ;------------0---  enable timer interrupt
                      =1    95                                             ;-------------001  timer priority
  0011                =1    96     INT0CtrlrVal    EQU             00011H                  ;set to level triggering, pri
                                   ority 2, enable
                      =1    97                                             ;000000000-------  reserved
                      =1    98                                             ;---------0------  disable fully nested mode
                      =1    99                                             ;----------0-----  disable cascade mode
                      =1   100                                                                                     ;----
                                   -------1----  level triggering
                      =1   101                                             ;------------0---  enable interrupt
                      =1   102                                             ;-------------010  int priority         
                                                                      
8086/87/88/186 MACRO ASSEMBLER    STARTUP                                                  23:27:36  06/08/:8  PAGE    3


LOC  OBJ                  LINE     SOURCE

  0012                =1   103     INT1CtrlrVal    EQU             00012H                  ;set to level triggering, pri
                                   ority 2, enable
                      =1   104                                             ;000000000-------  reserved
                      =1   105                                             ;---------0------  disable fully nested mode
                      =1   106                                             ;----------0-----  disable cascade mode
                      =1   107                                                                                     ;----
                                   -------1----  level triggering
                      =1   108                                             ;------------0---  enable interrupt
                      =1   109                                             ;-------------010  int priority         
                                                                                      
  001A                =1   110     INT1CtrlrValDisable EQU 0001AH                  ;set to level triggering, priority 2,
                                    disable
                      =1   111                                             ;000000000-------  reserved
                      =1   112                                             ;---------0------  disable fully nested mode
                      =1   113                                             ;----------0-----  disable cascade mode
                      =1   114                                                                                     ;----
                                   -------1----  level triggering
                      =1   115                                             ;------------1---  disable interrupt
                      =1   116                                             ;-------------010  int priority 
                      =1   117                                                                                     
  0008                =1   118     TimerEOI        EQU     00008H          ;Timer EOI command (samNone for all timers)
  8000                =1   119     NonSpecEOI      EQU     08000H          ;Non-specific EOI command
                      =1   120     
                      =1   121     
                      =1   122     ; Chip Select Unit Definitions
                      =1   123     
                      =1   124     ; Addresses
  FFA4                =1   125     PACSreg         EQU     0FFA4H          ;address of PACS register
  FFA8                =1   126     MPCSreg         EQU     0FFA8H          ;address of MPCS register
  FFA6                =1   127     MMCSaddr                EQU     0ffa6H                  ;address of MCS control regis
                                   ter
                      =1   128     
                      =1   129     ; Control Register Values
  8001                =1   130     MMCSvalue           EQU     8001H                       ;set to the following:
                      =1   131                                             ;1000000---------  start at 80000H
                      =1   132                                             ;-------000000---  reserved
                      =1   133                                             ;---------------1  1 wait state min
  0003                =1   134     PACSval         EQU     00003H          ;PCS base at 0, 3 wait states
                      =1   135                                             ;0000000000------  starts at address 0
                      =1   136                                             ;----------000---  reserved
                      =1   137                                             ;-------------0--  wait for RDY inputs
                      =1   138                                             ;--------------11  3 wait states
  4000                =1   139     MPCSval         EQU     04000H          ;PCS in I/O space, use PCS5/6, 3 wait states
                      =1   140                                             ;0---------000---  reserved
                      =1   141                                             ;-1000000--------  MCS is 512KB
                      =1   142                                             ;--------0-------  output PCS5/PCS6
                      =1   143                                             ;---------0------  PCS in I/O space
                      =1   144                                             ;-------------0--  wait for RDY inputs
                      =1   145                                             ;--------------11  3 wait states
                      =1   146     
                      =1   147     ; Timing Definitions
                      =1   148     
                      =1   149     
                      =1   150     
                      =1   151     ; General Definitions
8086/87/88/186 MACRO ASSEMBLER    STARTUP                                                  23:27:36  06/08/:8  PAGE    4


LOC  OBJ                  LINE     SOURCE

                      =1   152     
  0001                =1   153     FIRST_RESERVED_VEC      EQU     1       ;reserve vectors 1-3
  0003                =1   154     LAST_RESERVED_VEC       EQU     3
  0100                =1   155     NUM_IRQ_VECTORS         EQU     256     ;number of interrupt vectors
                      =1   156     
                           157 +1  $INCLUDE(bootcode.INC)
                      =1   158     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   159     ;                                                                            ;
                      =1   160     ;                                  bootcode.INC                              ;
                      =1   161     ;                              Boot Code Register Values                     ;
                      =1   162     ;                                 Include File                               ;
                      =1   163     ;                                                                            ;
                      =1   164     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   165     
                      =1   166     ; This file contains the definitions for bootcode.asm
                      =1   167     ;
                      =1   168     ; Revision History:
                      =1   169     
                      =1   170     ;     4/26/2008 Samuel Yang     File started
                      =1   171     
  FFA0                =1   172     UCSCtrl equ 0FFA0h              ;address of UCMS
  3000                =1   173     UCSCtrlVal     EQU     3000H          ;value to write to UCS Ctrl Register
                      =1   174                                             ;--11000000------  starting address 0F0000h (
                                   64k)
                      =1   175                                             ;-------------0--  enable bus ready
                      =1   176                                             ;--------------00  0 wait states             
                                                              ;----000000------  reserved
  FFA2                =1   177     LCSCtrl equ 0FFA2h              ;address of LCMS                                     
                                      
  07C0                =1   178     LCSCtrlVal     EQU     07C0H          ;value to write to LCS Ctrl Register
                      =1   179                                             ;--00011111------  ending address 07FFFFh (32
                                   k)
                      =1   180                                             ;-------------0--  enable bus ready
                      =1   181                                             ;--------------00  0 wait states 
                           182     
                           183     ; setup code and data groups
                           184     CGROUP  GROUP   CODE
                           185     DGROUP  GROUP   DATA, STACK
                           186     
                           187     EXTRN InitCS:Near
                           188     EXTRN ClrIRQVectors:Near
                           189     EXTRN InstallHandlerInt0:Near
                           190     EXTRN InstallHandlerInt1:Near
                           191     EXTRN InitKeypad:Near
                           192     EXTRN InitMP3Port:Near
                           193     EXTRN InitDisplay:Near
                           194     EXTRN InitElapsedTimer:Near
                           195     EXTRN InitDMA:Near
                           196     EXTRN   main:NEAR               ;declare the main function
                           197     ; segment register assumptions
                           198             ASSUME  CS:CGROUP, DS:DGROUP, ES:NOTHING, SS:DGROUP
                           199     
                           200     
                           201     
                           202     ; the data segment - used for static and global variables
8086/87/88/186 MACRO ASSEMBLER    STARTUP                                                  23:27:36  06/08/:8  PAGE    5


LOC  OBJ                  LINE     SOURCE

                           203     
----                       204     DATA    SEGMENT  WORD  PUBLIC  'DATA'
                           205     
                           206     
----                       207     DATA    ENDS
                           208     
                           209     
                           210     
                           211     
                           212     ; the stack segment - used for subroutine linkage, argument passing, and
                           213     ; local variables
                           214     
----                       215     STACK   SEGMENT  WORD  STACK  'STACK'
                           216     
                           217     
0000 (80                   218             DB      80 DUP ('Stack   ')             ;320 words
     537461636B2020
     20
     )
                           219     
0280                       220     TopOfStack      LABEL   WORD
                           221     
                           222     
----                       223     STACK   ENDS
                           224     
                           225     
                           226     
                           227     
                           228     ; the actual startup code - should be executed (jumped to) after reset
                           229     
----                       230     CODE    SEGMENT   PUBLIC  'CODE'
                           231     
                           232     
                           233            
0000                       234     START:
                           235     
0000                       236     main0:                                  ;start the program
                           237             ;PUBLIC  Start                  ;public so can jump to from power on code
                           238     
0000 BAA2FF                239                     MOV DX, LCSCtrl ;need to setup LCS control register to match RAM size
0003 B8C007                240                     MOV AX, LCSCtrlVal
0006 EE                    241                     OUT DX,AL               
                           242                     
0007 B8----         R      243             MOV     AX, DGROUP              ;initialize the stack pointer
000A 8ED0                  244             MOV     SS, AX
000C BC8002         R      245             MOV     SP, OFFSET(DGROUP:TopOfStack)
                           246     
000F B8----         R      247             MOV     AX, DGROUP              ;initialize the data segment
0012 8ED8                  248             MOV     DS, AX
                           249     
                           250             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           251             ; user initialization code goes here ;
                           252             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014 E80000         E      253                     CALL InitCS
0017 E80000         E      254                     CALL ClrIRQVectors
8086/87/88/186 MACRO ASSEMBLER    STARTUP                                                  23:27:36  06/08/:8  PAGE    6


LOC  OBJ                  LINE     SOURCE

001A E80000         E      255                     CALL InitKeypad
001D E80000         E      256                     CALL InitDisplay        
0020 E80000         E      257                     CALL InitMP3Port                
0023 E80000         E      258                     CALL InitElapsedTimer
0026 E80000         E      259                     CALL InitDMA
0029 E80000         E      260                     CALL InstallHandlerInt1         
002C E80000         E      261                     CALL InstallHandlerInt0
                           262     ;infLoop: JMP infLoop           
                           263             ;CALL    main2                    ;run the main function (no arguments)
002F E80000         E      264                     CALL main
0032 EBCC                  265             JMP     main0                   ;if return - reinitialize and try again
                           266     
                           267     
                           268     
----                       269     CODE    ENDS
                           270     
                           271     
                           272     
                           273             END START

ASSEMBLY COMPLETE, NO ERRORS FOUND
