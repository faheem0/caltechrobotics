iC-86  COMPILER   FFREV                                                                      06/12/:8 02:13:41  PAGE   1


DOS 5.0 (038-N) iC-86 COMPILER V4.0, COMPILATION OF MODULE FFREV
OBJECT MODULE PLACED IN FFREV.OBJ
COMPILER INVOKED BY: C:\ASMSTU~1\IC86.EXE FFREV.C DEBUG EXTEND MOD186 SMALL OPTIMIZE(0) ROM

 line level  incl 

    1             /****************************************************************************/
    2             /*                                                                          */
    3             /*                                  FFREV                                   */
    4             /*                      Fast Forward/Reverse Functions                      */
    5             /*                           MP3 Jukebox Project                            */
    6             /*                                EE/CS  52                                 */
    7             /*                                                                          */
    8             /****************************************************************************/
    9             
   10             /*
   11                This file contains the key processing and update functions for the Fast
   12                Forward and Reverse operations of the MP3 Jukebox Project.  These functions
   13                take care of processing an input key (from the keypad) and updates for Fast
   14                Forward and Reverse operations.  They are called by the main loop of the
   15                MP3 Jukebox.  The functions included are:
   16                   begin_FastFwd   - switch to fast forward from reverse (key processing
   17                                     function)
   18                   begin_Reverse   - switch to reverse from fast forward (key processing
   19                                     function)
   20                   dec_FFRev_rate  - decrease the fast forward/reverse rate
   21                   inc_FFRev_rate  - increase the fast forward/reverse rate
   22                   start_FastFwd   - start going fast forward (key processing function)
   23                   start_Reverse   - start going reverse (key processing function)
   24                   stop_FFRev      - stop when doing fast forward or reverse (key
   25                                     processing function)
   26                   switch_FastFwd  - switch to fast forward from play (key processing
   27                                     function)
   28                   switch_Reverse  - switch to reverse from play (key processing function)
   29                   update_FastFwd  - fast forwarding, update the time (update function)
   30                   update_Reverse  - reversing, update the time (update function)
   31             
   32                The local functions included are:
   33                   none
   34             
   35                The locally global variable definitions included are:
   36                   FFRev_rate - rate at which to run fast forward/reverse
   37                   time_FFRev - leftover (after rounding) time for fast forward/reverse
   38             
   39             
   40                Revision History
   41                   6/4/00   Glen George       Initial revision (from 3/6/99 version of
   42                                              ffrev.c from the Digital Audio Recorder
   43                                              Project).
   44                   6/2/02   Glen George       Changed update_FastFwd() and update_Reverse()
   45                                              to use the elapsed_time() function to do the
   46                                              fast forward and reverse operations, rather
   47                                              than the user update function.
   48                   6/2/02   Glen George       Added time_FFRev global variable to support
   49                                              fast forward and reverse operations.
   50                   6/2/02   Glen George       Rewrote start_FastFwd(), start_Reverse(),
   51                                              begin_FastFwd(), begin_Reverse(), and
iC-86  COMPILER   FFREV                                                                      06/12/:8 02:13:41  PAGE   2


   52                                              stop_FFRev() to implement the new method for
   53                                              doing fast forward and reverse operations.
   54                   6/2/02   Glen George       Updated comments.
   55                   6/5/03   Glen George       Updated start_FastFwd and start_Reverse to
   56                                              not do anything if the current track is a
   57                                              directory (supports FAT file systems).
   58                   6/5/03   Glen George       Added #include of fatutil.h for function
   59                                              declarations needed by above change.
   60                   6/5/03   Glen George       Updated function headers.
   61                   6/5/08   Glen George       Added functions dec_FFRev_rate and
   62                                              inc_FFRev_rate along with the shared variable
   63                              FFRev_rate to support variable rate fast
   64                              forward and reverse.
   65             */
   66             
   67             
   68             
   69             /* library include files */
   70               /* none */
   71             
   72             /* local include files */
   73             #include  "mp3defs.h"
   74             #include  "keyproc.h"
   75             #include  "updatfnc.h"
   76             #include  "trakutil.h"
   77             #include  "fatutil.h"
   78             
   79             
   80             
   81             /* locally global variables */
   82             
   83             static int  FFRev_rate;         /* rate at which to increment/decrement fast forward/reverse */
   84             
   85             static int  time_FFRev;         /* leftover time (after rounding) for fast forward/reverse */
   86             
   87             
   88             
   89             
   90             /*
   91                start_FastFwd
   92             
   93                Description:      This function handles the <Fast Forward> key when nothing
   94                                  is happening in the system.
   95                              
   96                Operation:        It starts the fast forward operation if there is time
   97                                  remaining on the current track to fast forward thru and
   98                                  the track is not a directory and does nothing otherwise.
   99             
  100                Arguments:        cur_status (enum status) - the current system status.
  101                Return Value:     (enum status) - the new system status: STAT_FF if there
  102                                  is something on the track to fast forward thru, the
  103                                  passed current status otherwise.
  104             
  105                Input:            None.
  106                Output:           None.
  107             
  108                Error Handling:   None.
iC-86  COMPILER   FFREV                                                                      06/12/:8 02:13:41  PAGE   3


  109             
  110                Algorithms:       None.
  111                Data Structures:  None.
  112             
  113                Shared Variables: FFRev_rate - reset to MIN_FFREV_RATE.
  114                                  time_FFRev - reset to 0.
  115             
  116                Author:           Glen George
  117                Last Modified:    June 5, 2008
  118             
  119             */
  120             
  121             enum status  start_FastFwd(enum status cur_status)
  122             {
  123     1           /* variables */
  124     1             /* none */
  125     1       
  126     1       
  127     1       
  128     1           /* check if something is left on the track and it isn't a directory */
  129     1           if (!cur_isDir() && (get_track_remaining_length() != 0))  {
  130     2       
  131     2               /* not a directory and something is left on the track - fast forward it */
  132     2       
  133     2               /* clear out the timer for the fast forward operation */
  134     2               (void) elapsed_time();
  135     2               /* also clear leftover time */
  136     2               time_FFRev = 0;
  137     2       
  138     2           /* start at slowest fast forward rate */
  139     2           FFRev_rate = MIN_FFREV_RATE;
  140     2       
  141     2               /* set status to fast forward */
  142     2               cur_status = STAT_FF;
  143     2           }
  144     1       
  145     1       
  146     1           /* return with the possibly new system status */
  147     1           return  cur_status;
  148     1       
  149     1       }
  150             
  151             
  152             
  153             
  154             /*
  155                start_Reverse
  156             
  157                Description:      This function handles the <Reverse> key when nothing is
  158                                  happening in the system.
  159             
  160                Operation:        The function starts the reverse operation if there is
  161                                  data to be reversed thru on the current track and the
  162                                  track is not a directory and does nothing otherwise.
  163             
  164                Arguments:        cur_status (enum status) - the current system status.
  165                Return Value:     (enum status) - the new system status: STAT_REV if there
iC-86  COMPILER   FFREV                                                                      06/12/:8 02:13:41  PAGE   4


  166                                  is something left on the track to reverse thru, the
  167                                  passed current status otherwise.
  168             
  169                Input:            None.
  170                Output:           None.
  171             
  172                Error Handling:   None.
  173             
  174                Algorithms:       None.
  175                Data Structures:  None.
  176             
  177                Shared Variables: FFRev_rate - reset to MIN_FFREV_RATE.
  178                                  time_FFRev - reset to 0.
  179             
  180                Author:           Glen George
  181                Last Modified:    June 5, 2008
  182             
  183             */
  184             
  185             enum status  start_Reverse(enum status cur_status)
  186             {
  187     1           /* variables */
  188     1             /* none */
  189     1       
  190     1       
  191     1       
  192     1           /* check if entry is not a directory and something is left on the track */
  193     1           if (!cur_isDir() && (get_track_remaining_length() != get_track_length()))  {
  194     2       
  195     2               /* something is on the track & not a directory, can do reverse */
  196     2       
  197     2               /* clear out the timer for the reverse operation */
  198     2               (void) elapsed_time();
  199     2               /* also clear leftover time */
  200     2               time_FFRev = 0;
  201     2       
  202     2           /* start at slowest reverse rate */
  203     2           FFRev_rate = MIN_FFREV_RATE;
  204     2       
  205     2               /* set status to reverse */
  206     2               cur_status = STAT_REV;
  207     2           }
  208     1       
  209     1       
  210     1           /* return the possibly new status */
  211     1           return  cur_status;
  212     1       
  213     1       }
  214             
  215             
  216             
  217             
  218             /*
  219                switch_FastFwd
  220             
  221                Description:      This function handles the <Fast Forward> key when playing
  222                                  a track.  It turns off the audio output and then starts
iC-86  COMPILER   FFREV                                                                      06/12/:8 02:13:41  PAGE   5


  223                                  the fast forward operation.
  224             
  225                Arguments:        cur_status (enum status) - the current system status (not
  226                                                             used).
  227                Return Value:     (enum status) - the new system status is returned (by
  228                                  start_FastFwd actually).
  229             
  230                Input:            None.
  231                Output:           None.
  232             
  233                Error Handling:   None.
  234             
  235                Algorithms:       None.
  236                Data Structures:  None.
  237             
  238                Shared Variables: None.
  239             
  240                Author:           Glen George
  241                Last Modified:    Mar. 11, 1995
  242             
  243             */
  244             
  245             enum status  switch_FastFwd(enum status cur_status)
  246             {
  247     1           /* variables */
  248     1             /* none */
  249     1       
  250     1       
  251     1       
  252     1           /* first turn off the audio output */
  253     1           audio_halt();
  254     1       
  255     1       
  256     1           /* now start the fast forward operation (returning it's status) */
  257     1           /* note: currently doing nothing so in Idle state */
  258     1           return  start_FastFwd(STAT_IDLE);
  259     1       
  260     1       }
  261             
  262             
  263             
  264             
  265             /*
  266                switch_Reverse
  267             
  268                Description:      This function handles the <Reverse> key when playing a
  269                                  track.  It turns off the audio output and then starts the
  270                                  reverse operation.
  271             
  272                Arguments:        cur_status (enum status) - the current system status (not
  273                                                             used).
  274                Return Value:     (enum status) - the new system status is returned (by
  275                                  start_Reverse actually).
  276             
  277                Input:            None.
  278                Output:           None.
  279             
iC-86  COMPILER   FFREV                                                                      06/12/:8 02:13:41  PAGE   6


  280                Error Handling:   None.
  281             
  282                Algorithms:       None.
  283                Data Structures:  None.
  284             
  285                Shared Variables: None.
  286             
  287                Author:           Glen George
  288                Last Modified:    Mar. 11, 1995
  289             
  290             */
  291             
  292             enum status  switch_Reverse(enum status cur_status)
  293             {
  294     1           /* variables */
  295     1             /* none */
  296     1       
  297     1       
  298     1       
  299     1           /* first turn off the audio output */
  300     1           audio_halt();
  301     1       
  302     1       
  303     1           /* now start up reverse, returning it's status */
  304     1           /* note: currently doing nothing so in Idle state */
  305     1           return  start_Reverse(STAT_IDLE);
  306     1       
  307     1       }
  308             
  309             
  310             
  311             
  312             /*
  313                begin_FastFwd
  314             
  315                Description:      This function handles the <Fast Forward> key when
  316                                  currently going in reverse.
  317             
  318                Operation:        The function resets the time for timing the fast forward
  319                                  operation and the fast forward rate and returns a new
  320                                  status.
  321             
  322                Arguments:        cur_status (enum status) - the current system status (not
  323                                                             used).
  324                Return Value:     (enum status) - the new status (STAT_FF) is returned.
  325             
  326                Input:            None.
  327                Output:           None.
  328             
  329                Error Handling:   None.
  330             
  331                Algorithms:       None.
  332                Data Structures:  None.
  333             
  334                Shared Variables: FFRev_rate - reset to MIN_FFREV_RATE.
  335                                  time_FFRev - reset to 0.
  336             
iC-86  COMPILER   FFREV                                                                      06/12/:8 02:13:41  PAGE   7


  337                Author:           Glen George
  338                Last Modified:    June 5, 2008
  339             
  340             */
  341             
  342             enum status  begin_FastFwd(enum status cur_status)
  343             {
  344     1           /* variables */
  345     1             /* none */
  346     1       
  347     1       
  348     1       
  349     1           /* clear out the timer for the fast forward operation */
  350     1           (void) elapsed_time();
  351     1           /* also clear leftover time */
  352     1           time_FFRev = 0;
  353     1       
  354     1           /* start at slowest fast forward rate */
  355     1           FFRev_rate = MIN_FFREV_RATE;
  356     1       
  357     1           /* and return the new status */
  358     1           return  STAT_FF;
  359     1       
  360     1       }
  361             
  362             
  363             
  364             
  365             /*
  366                begin_Reverse
  367             
  368                Description:      This function handles the <Reverse> key when currently
  369                                  operating in fast forward.
  370             
  371                Operation:        The function resets the timer used to time the reverse
  372                                  operation and the reverse rate and then returns STAT_REV
  373                                  as the status.
  374             
  375                Arguments:        cur_status (enum status) - the current system status (not
  376                                                             used).
  377                Return Value:     (enum status) - the new status (STAT_REV) is returned.
  378             
  379                Input:            None.
  380                Output:           None.
  381             
  382                Error Handling:   None.
  383             
  384                Algorithms:       None.
  385                Data Structures:  None.
  386             
  387                Shared Variables: FFRev_rate - reset to MIN_FFREV_RATE.
  388                                  time_FFRev - reset to 0.
  389             
  390                Author:           Glen George
  391                Last Modified:    June 5, 2008
  392             
  393             */
iC-86  COMPILER   FFREV                                                                      06/12/:8 02:13:41  PAGE   8


  394             
  395             enum status  begin_Reverse(enum status cur_status)
  396             {
  397     1           /* variables */
  398     1             /* none */
  399     1       
  400     1       
  401     1       
  402     1           /* clear out the timer for the reverse operation */
  403     1           (void) elapsed_time();
  404     1           /* also clear leftover time */
  405     1           time_FFRev = 0;
  406     1       
  407     1           /* start at slowest reverse rate */
  408     1           FFRev_rate = MIN_FFREV_RATE;
  409     1       
  410     1           /* and return STAT_REV as the new status */
  411     1           return  STAT_REV;
  412     1       
  413     1       }
  414             
  415             
  416             
  417             
  418             /*
  419                stop_FFRev
  420             
  421                Description:      This function handles the <Stop> key when fast forwarding
  422                                  or reversing.  It just changes to the idle status.  Note
  423                                  that the time is left unaffected.
  424             
  425                Arguments:        cur_status (enum status) - the current system status (not
  426                                                             used).
  427                Return Value:     (enum status) - the new status (STAT_IDLE) is returned.
  428             
  429                Input:            None.
  430                Output:           None.
  431             
  432                Error Handling:   None.
  433             
  434                Algorithms:       None.
  435                Data Structures:  None.
  436             
  437                Shared Variables: None.
  438             
  439                Author:           Glen George
  440                Last Modified:    June 1, 2002
  441             
  442             */
  443             
  444             enum status  stop_FFRev(enum status cur_status)
  445             {
  446     1           /* variables */
  447     1             /* none */
  448     1       
  449     1       
  450     1       
iC-86  COMPILER   FFREV                                                                      06/12/:8 02:13:41  PAGE   9


  451     1           /* just return the idle status */
  452     1           return  STAT_IDLE;
  453     1       
  454     1       }
  455             
  456             
  457             
  458             
  459             /*
  460                update_FastFwd
  461             
  462                Description:      This function handles updates when fast forwarding.  The
  463                                  function gets the elapsed time, scales it appropriately,
  464                                  and updates the track time and buffer pointer for the new
  465                                  position.  When the end of the track is reached the
  466                                  status is returned to idle (the time is left at 0).
  467             
  468                Arguments:        cur_status (enum status) - the current system status.
  469                Return Value:     (enum status) - the new status: passed current status if
  470                                  not at the end of the track and STAT_IDLE if at the end.
  471             
  472                Input:            None.
  473                Output:           The new track time (if any) is output to the display.
  474             
  475                Error Handling:   None.
  476             
  477                Algorithms:       None.
  478                Data Structures:  None.
  479             
  480                Shared Variables: time_FFRev - updated.
  481             
  482                Author:           Glen George
  483                Last Modified:    June 1, 2002
  484             
  485             */
  486             
  487             enum status  update_FastFwd(enum status cur_status)
  488             {
  489     1           /* variables */
  490     1           long int  etime;            /* the elapsed time since the last call */
  491     1       
  492     1           long int  buffer_fwd;       /* amount to move forward on track */
  493     1       
  494     1       
  495     1       
  496     1           /* is there anything left in the track to fast forward through */
  497     1           if (get_track_remaining_length() != 0)  {
  498     2       
  499     2       
  500     2               /* something on track - get the elapsed time for fast forward operation */
  501     2               /* it needs to be scaled and have any leftover time added in */
  502     2               etime = FFRev_rate * elapsed_time() + time_FFRev;
  503     2       
  504     2               /* has enough time elapsed for fast forwarding */
  505     2               if (etime > MIN_FFREV_TIME)  {
  506     3       
  507     3                   /* can and should move forward - compute how many bytes */
iC-86  COMPILER   FFREV                                                                      06/12/:8 02:13:41  PAGE  10


  508     3                   buffer_fwd = (get_track_length() * etime) / (100L * get_track_total_time());
  509     3       
  510     3                   /* truncate it to the nearest number of blocks */
  511     3                   buffer_fwd = (buffer_fwd / IDE_BLOCK_SIZE);
  512     3                   /* compute the leftover time and save it for next time */
  513     3                   time_FFRev = etime - (100L * get_track_total_time() * buffer_fwd * IDE_BLOCK_SIZE) / get_t
                -rack_length();
  514     3                   /* make sure there isn't a minor math error */
  515     3                   if (time_FFRev < 0)
  516     3                       /* leftover amount shouldn't be negative */
  517     3                       time_FFRev = 0;
  518     3       
  519     3                   /* if there are buffers to move forward, do so */
  520     3                   if (buffer_fwd > 0)  {
  521     4                       update_track_position(buffer_fwd * IDE_BLOCK_SIZE);
  522     4       
  523     4                       /* also display the new time */
  524     4                       display_time(get_track_time());
  525     4                   }
  526     3               }
  527     2               else  {
  528     3       
  529     3                   /* not enough time yet for fast forwarding - save the accumulated time */
  530     3                   time_FFRev = etime;
  531     3               }
  532     2           }
  533     1           else  {
  534     2       
  535     2       
  536     2               /* done with this track - switch to the idle state */
  537     2               cur_status = STAT_IDLE;
  538     2           }
  539     1       
  540     1       
  541     1           /* done with update, return the new status */
  542     1           return  cur_status;
  543     1       
  544     1       }
  545             
  546             
  547             
  548             
  549             /*
  550                update_Reverse
  551             
  552                Description:      This function handles updates when reversing.  The
  553                                  function gets the elapsed time, scales it appropriately,
  554                                  and updates the track time and buffer pointer for the new
  555                                  position.  When the start of the track is reached the
  556                                  status is returned to idle (the time is left at the
  557                                  start).
  558             
  559                Arguments:        cur_status (enum status) - the current system status.
  560                Return Value:     (enum status) - the new status: the passed current status
  561                                  if not at the start of the track and STAT_IDLE if rewound
  562                                  to the start of the track.
  563             
iC-86  COMPILER   FFREV                                                                      06/12/:8 02:13:41  PAGE  11


  564                Input:            None.
  565                Output:           New track time (if any) is output to the display.
  566             
  567                Error Handling:   None.
  568             
  569                Algorithms:       None.
  570                Data Structures:  None.
  571             
  572                Shared Variables: time_FFRev - updated.
  573             
  574                Author:           Glen George
  575                Last Modified:    June 1, 2002
  576             
  577             */
  578             
  579             enum status  update_Reverse(enum status cur_status)
  580             {
  581     1           /* variables */
  582     1           long int  etime;            /* the elapsed time since the last call */
  583     1       
  584     1           long int  buffer_rev;       /* amount to move backward on the track */
  585     1       
  586     1       
  587     1       
  588     1           /* check if already at the start of the track */
  589     1           if (get_track_remaining_length() != get_track_length())  {
  590     2       
  591     2       
  592     2               /* something on track - get the elapsed time for reverse operation */
  593     2               /* it needs to be scaled and have any leftover time added in */
  594     2               etime = FFRev_rate * elapsed_time() + time_FFRev;
  595     2       
  596     2               /* has enough time elapsed for reversing */
  597     2               if (etime > MIN_FFREV_TIME)  {
  598     3       
  599     3                   /* can and should move backward - compute how many bytes */
  600     3                   buffer_rev = (get_track_length() * etime) / (100L * get_track_total_time());
  601     3       
  602     3                   /* truncate it to the nearest number of blocks */
  603     3                   buffer_rev = (buffer_rev / IDE_BLOCK_SIZE);
  604     3                   /* compute the leftover time and save it for next time */
  605     3                   time_FFRev = etime - (100L * get_track_total_time() * buffer_rev * IDE_BLOCK_SIZE) / get_t
                -rack_length();
  606     3                   /* make sure there isn't a minor math error */
  607     3                   if (time_FFRev < 0)
  608     3                       /* leftover amount shouldn't be negative */
  609     3                       time_FFRev = 0;
  610     3       
  611     3                   /* if there are buffers to move back, do so */
  612     3                   if (buffer_rev > 0)  {
  613     4                       update_track_position(-buffer_rev * IDE_BLOCK_SIZE);
  614     4       
  615     4                       /* also display the new time */
  616     4                       display_time(get_track_time());
  617     4                   }
  618     3               }
  619     2               else  {
iC-86  COMPILER   FFREV                                                                      06/12/:8 02:13:41  PAGE  12


  620     3       
  621     3                   /* not enough time yet for reversing - save the accumulated time */
  622     3                   time_FFRev = etime;
  623     3               }
  624     2           }
  625     1           else  {
  626     2       
  627     2       
  628     2               /* hit the start of the track - need to reload the pointers */
  629     2               init_track();
  630     2       
  631     2               /* display the new time */
  632     2               display_time(get_track_time());
  633     2       
  634     2               /* and switch back to idle state */
  635     2               cur_status = STAT_IDLE;
  636     2           }
  637     1       
  638     1       
  639     1           /* all done, return the possibly new status */
  640     1           return  cur_status;
  641     1       
  642     1       }
  643             
  644             
  645             
  646             
  647             /*
  648                dec_FFRev_rate
  649             
  650                Description:      This function decrements the fast forward/reverse rate by
  651                                  DELTA_FFREV_RATE.  It can only be decremented down to
  652                                  MIN_FFREV_RATE, it cannot be decremented below that.
  653             
  654                Operation:        DELTA_FFREV_RATE is subtracted from the shared variable
  655                                  FFRev_rate and if it is less than MIN_FFREV_RATE it is
  656                          set to that value.
  657             
  658                Arguments:        None.
  659                Return Value:     None.
  660             
  661                Input:            None.
  662                Output:           None.
  663             
  664                Error Handling:   None.
  665             
  666                Algorithms:       None.
  667                Data Structures:  None.
  668             
  669                Shared Variables: FFRev_rate - decremented by DELTA_FFREV_RATE.
  670             
  671                Author:           Glen George
  672                Last Modified:    June 5, 2008
  673             
  674             */
  675             
  676             void  dec_FFRev_rate(void)
iC-86  COMPILER   FFREV                                                                      06/12/:8 02:13:41  PAGE  13


  677             {
  678     1           /* variables */
  679     1             /* none */
  680     1       
  681     1       
  682     1       
  683     1           /* decrement the fast forward/reverse rate */
  684     1           FFRev_rate -= DELTA_FFREV_RATE;
  685     1       
  686     1           /* make sure the rate isn't too low */
  687     1           if (FFRev_rate < MIN_FFREV_RATE)
  688     1               /* limit FFRev_rate to [MIN_FFREV_RATE, MAX_FFREV_RATE] */
  689     1           FFRev_rate = MIN_FFREV_RATE;
  690     1       
  691     1       
  692     1           /* done computing the new fast forward/reverse rate */
  693     1           return;
  694     1       
  695     1       }
  696             
  697             
  698             
  699             
  700             /*
  701                inc_FFRev_rate
  702             
  703                Description:      This function increments the fast forward/reverse rate by
  704                                  DELTA_FFREV_RATE.  It can only be incremented to
  705                                  MAX_FFREV_RATE, it cannot be incremented above that.
  706             
  707                Operation:        DELTA_FFREV_RATE is added to the shared variable
  708                                  FFRev_rate and if it is greater than MAX_FFREV_RATE it
  709                          is set to that value.
  710             
  711                Arguments:        None.
  712                Return Value:     None.
  713             
  714                Input:            None.
  715                Output:           None.
  716             
  717                Error Handling:   None.
  718             
  719                Algorithms:       None.
  720                Data Structures:  None.
  721             
  722                Shared Variables: FFRev_rate - incremented by DELTA_FFREV_RATE.
  723             
  724                Author:           Glen George
  725                Last Modified:    June 5, 2008
  726             
  727             */
  728             
  729             void  inc_FFRev_rate(void)
  730             {
  731     1           /* variables */
  732     1             /* none */
  733     1       
iC-86  COMPILER   FFREV                                                                      06/12/:8 02:13:41  PAGE  14


  734     1       
  735     1       
  736     1           /* increment the fast forward/reverse rate */
  737     1           FFRev_rate += DELTA_FFREV_RATE;
  738     1       
  739     1           /* make sure the rate isn't too high */
  740     1           if (FFRev_rate > MAX_FFREV_RATE)
  741     1               /* limit FFRev_rate to [MIN_FFREV_RATE, MAX_FFREV_RATE] */
  742     1           FFRev_rate = MAX_FFREV_RATE;
  743     1       
  744     1       
  745     1           /* done computing the new fast forward/reverse rate */
  746     1           return;
  747     1       
  748     1       }



MODULE INFORMATION:

     CODE AREA SIZE               = 03AEH    942D
     CONSTANT AREA SIZE           = 0000H      0D
     DATA AREA SIZE               = 0004H      4D
     MAXIMUM STACK SIZE           = 0018H     24D

iC-86 COMPILATION COMPLETE.      0 WARNINGS,     0 ERRORS
