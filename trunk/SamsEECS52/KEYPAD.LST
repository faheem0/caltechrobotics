8086/87/88/186 MACRO ASSEMBLER    KEYPAD                                                   15:20:14  05/04/:8  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE KEYPAD
OBJECT MODULE PLACED IN KEYPAD.OBJ
ASSEMBLER INVOKED BY:  C:\ASMSTU~1\ASM86.EXE KEYPAD.ASM DB M1 EP


LOC  OBJ                  LINE     SOURCE

                             1            NAME  keypad
                             2     
                             3     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4     ;                                                                            ;
                             5     ;                                    keypad                                ;
                             6     ;                           Keypad Event Handler                             ;
                             7     ;                                                                            ;
                             8     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9     
                            10     ; Description:      This program an event handler (interrupt service routine).
                            11     ;                   It reads from the keypad.
                            12     ;
                            13     ; Input:            Keypad
                            14     ; Output:           None.
                            15     ; User Interface:   call functions getkey() , key_available()
                            16     ; Error Handling:   None.
                            17     ;
                            18     ; Algorithms:       None.
                            19     ; Data Structures:  None.
                            20     ;
                            21     ; Revision History:
                            22     
                            23     ;     5/2/08  Samuel Yang     
                            24     
                            25     
                            26     ; local include files
                            27 +1  $INCLUDE(keypad.INC)
                      =1    28     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    29     ;                                                                            ;
                      =1    30     ;                                  keypad.INC                                ;
                      =1    31     ;                              Keypad Event Handler                          ;
                      =1    32     ;                                 Include File                               ;
                      =1    33     ;                                                                            ;
                      =1    34     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    35     
                      =1    36     ; This file contains the definitions for the Keypad Event Handler
                      =1    37     ; program (keypad.ASM).
                      =1    38     ;
                      =1    39     ; Revision History:
                      =1    40     
                      =1    41     ;     5/2/2008 Samuel Yang     
                      =1    42     
                      =1    43     
  0080                =1    44     KeypadAddress   EQU     0080H           ;keypad address
                      =1    45     
  000F                =1    46     KEYPADDATAMASK EQU 000fh                ;only use 4 bits
                      =1    47     
                            48 +1  $INCLUDE(boolean.INC)
                      =1    49     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    50     ;                                                                            ;
8086/87/88/186 MACRO ASSEMBLER    KEYPAD                                                   15:20:14  05/04/:8  PAGE    2


LOC  OBJ                  LINE     SOURCE

                      =1    51     ;                                  boolean.INC                               ;
                      =1    52     ;                             Boolean Definitions                            ;
                      =1    53     ;                                 Include File                               ;
                      =1    54     ;                                                                            ;
                      =1    55     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    56     
                      =1    57     ; This file contains the boolean definitions for the 80188 MP3 Player.
                      =1    58     ;
                      =1    59     ; Revision History:
                      =1    60     
                      =1    61     ;     5/2/2008 Samuel Yang     
                      =1    62     
                      =1    63     
  0001                =1    64     TRUE EQU 1h
  0000                =1    65     FALSE EQU 0h
                            66 +1  $INCLUDE(regAddrs.INC)
                      =1    67     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    68     ;                                                                            ;
                      =1    69     ;                                  regAddrs.INC                              ;
                      =1    70     ;                              Register Addresses and Values                 ;
                      =1    71     ;                                 Include File                               ;
                      =1    72     ;                                                                            ;
                      =1    73     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    74     
                      =1    75     ; This file contains the definitions for the 801C88 MP3 Player.
                      =1    76     ;
                      =1    77     ;
                      =1    78     ; Revision History:
                      =1    79     
                      =1    80     ;     5/2/2008 Samuel Yang     
                      =1    81     
                      =1    82     
                      =1    83     
                      =1    84     
                      =1    85     
                      =1    86     ; Interrupt Vectors
  000C                =1    87     Int0Vec         EQU     12               ;interrupt vector for INT 0
  000D                =1    88     Int1Vec         EQU     13               ;interrupt vector for INT 1
                      =1    89     
                      =1    90     
                      =1    91     ; Interrupt Controller Definitions
                      =1    92     
                      =1    93     ; Addresses
  FF38                =1    94     INT0Ctrlr        EQU    0FF38H           ;address of interrupt 0 controller
  FF3A                =1    95     INT1Ctrlr        EQU    0FF3AH           ;address of interrupt 1 controller
  FF32                =1    96     INTCtrlrCtrl    EQU     0FF32H          ;address of interrupt controller for timer
  FF22                =1    97     INTCtrlrEOI     EQU     0FF22H          ;address of interrupt controller EOI register
                      =1    98     
                      =1    99     ; Register Values
  0001                =1   100     INTCtrlrCVal    EQU     00001H          ;set priority for timers to 1 and enable
                      =1   101                                             ;000000000000----  reserved
                      =1   102                                             ;------------0---  enable timer interrupt
                      =1   103                                             ;-------------001  timer priority
  0011                =1   104     INT0CtrlrVal    EQU             00011H                                          
                                                              
8086/87/88/186 MACRO ASSEMBLER    KEYPAD                                                   15:20:14  05/04/:8  PAGE    3


LOC  OBJ                  LINE     SOURCE

  0011                =1   105     INT1CtrlrVal    EQU             00011H                                          
                                                                      
                      =1   106     
  0008                =1   107     TimerEOI        EQU     00008H          ;Timer EOI command (samNone for all timers)
  8000                =1   108     NonSpecEOI      EQU     08000H          ;Non-specific EOI command
                      =1   109     
                      =1   110     
                      =1   111     ; Chip Select Unit Definitions
                      =1   112     
                      =1   113     ; Addresses
  FFA4                =1   114     PACSreg         EQU     0FFA4H          ;address of PACS register
  FFA8                =1   115     MPCSreg         EQU     0FFA8H          ;address of MPCS register
                      =1   116     
                      =1   117     
                      =1   118     ; Control Register Values
  0003                =1   119     PACSval         EQU     00003H          ;PCS base at 0, 3 wait states
                      =1   120                                             ;0000000000------  starts at address 0
                      =1   121                                             ;----------000---  reserved
                      =1   122                                             ;-------------0--  wait for RDY inputs
                      =1   123                                             ;--------------11  3 wait states
  0183                =1   124     MPCSval         EQU     00183H          ;PCS in I/O space, use PCS5/6, 3 wait states
                      =1   125                                             ;0---------000---  reserved
                      =1   126                                             ;-0000001--------  MCS is 8KB
                      =1   127                                             ;--------1-------  output PCS5/PCS6
                      =1   128                                             ;---------0------  PCS in I/O space
                      =1   129                                             ;-------------0--  wait for RDY inputs
                      =1   130                                             ;--------------11  3 wait states
                      =1   131     
                      =1   132     ; Timing Definitions
                      =1   133     
                      =1   134     
                      =1   135     
                      =1   136     ; General Definitions
                      =1   137     
  0001                =1   138     FIRST_RESERVED_VEC      EQU     1       ;reserve vectors 1-3
  0003                =1   139     LAST_RESERVED_VEC       EQU     3
  0100                =1   140     NUM_IRQ_VECTORS         EQU     256     ;number of interrupt vectors
                      =1   141     
                           142     
                           143     CGROUP GROUP CODE
                           144     DGROUP GROUP DATA
                           145     
                           146     
----                       147     CODE SEGMENT PUBLIC 'CODE'
                           148     
                           149             ASSUME  CS:CGROUP, DS:DGROUP
                           150     
                           151     
                           152     
                           153     ; Int0EventHandler
                           154     ;
                           155     ; Description:       This procedure is the event handler for when the
                           156     ;                       keypad debouncing chip signals a pressed key.
                           157     ;
                           158     ; Operation:         Reads data in, updates status of pressed key.
8086/87/88/186 MACRO ASSEMBLER    KEYPAD                                                   15:20:14  05/04/:8  PAGE    4


LOC  OBJ                  LINE     SOURCE

                           159     ;
                           160     ; Arguments:         None.
                           161     ; Return Value:      None.
                           162     ;
                           163     ; Local Variables:   None.
                           164     ; Shared Variables:  keyCode, keyReady
                           165     
                           166     ; Input:            From keypad debouncing chip.
                           167     ; Output:            None.
                           168     ;
                           169     ; Error Handling:    None.
                           170     ;
                           171     ; Algorithms:        None.
                           172     ; Data Structures:   None.
                           173     ;
                           174     ; Registers Changed: None
                           175     ; Stack Depth:       3 words
                           176     ;
                           177     ; Last Modified:     5-2-2008
                           178     
0000                       179     Int0EventHandler       PROC    NEAR
                           180                                             PUBLIC Int0EventHandler
0000 50                    181                     PUSH AX                         ;save register values
0001 52                    182                     PUSH DX
0002 33C0                  183                     XOR AX, AX
0004 33D2                  184                     XOR DX, DX
0006 BA8000                185                     MOV DX, keypadAddress
0009 EC                    186                     IN AL, DX
000A 250F00                187                     AND AX, KEYPADDATAMASK
000D A30000         R      188                     MOV keyCode, AX
0010 C60602000190   R      189                     MOV keyReady, TRUE
                           190     
0016 BA22FF                191             MOV     DX, INTCtrlrEOI         ;send the EOI to the interrupt controller
0019 B80C00                192             MOV     AX, Int0Vec
001C EE                    193             OUT     DX, AL
                           194                     
                           195                     
001D 5A                    196                     POP DX                                                  ;restore regi
                                   ster values
001E 58                    197                     POP AX
001F CF                    198             IRET                            ;and return (Event Handlers end with IRET not
                                    RET)
                           199     
                           200     
                           201     Int0EventHandler       ENDP
                           202     
                           203     
                           204     ; InitKeypad
                           205     ;
                           206     ; Description:       This procedure initializes everything for keypad
                           207     ;
                           208     ; Operation:        Initializes shared variables
                           209     ;
                           210     ; Arguments:         None.
                           211     ; Return Value:      None.
8086/87/88/186 MACRO ASSEMBLER    KEYPAD                                                   15:20:14  05/04/:8  PAGE    5


LOC  OBJ                  LINE     SOURCE

                           212     ;
                           213     ; Local Variables:   None.
                           214     ; Shared Variables:  keyCode, keyReady
                           215     
                           216     ; Input:            None.
                           217     ; Output:            None.
                           218     ;
                           219     ; Error Handling:    None.
                           220     ;
                           221     ; Algorithms:        None.
                           222     ; Data Structures:   None.
                           223     ;
                           224     ; Registers Changed: None
                           225     ; Stack Depth:       1 words
                           226     ;
                           227     ; Last Modified:     5-2-2008
0020                       228     InitKeypad   PROC    NEAR
                           229                             PUBLIC InitKeypad
0020 C60602000090   R      230                     MOV keyReady, FALSE     
0026 C70600000000   R      231                     MOV keyCode, 0                                  ;this doesn't really 
                                   have to be initialized since keyReady is FALSE
                           232                     
002C C3                    233                     RET
                           234     InitKeypad   ENDP
                           235     
                           236     ; key_available
                           237     ;
                           238     ; Description:       Returns true if a key has been pressed
                           239     ;
                           240     ; Operation:        Returns shared variable
                           241     ;
                           242     ; Arguments:         None.
                           243     ; Return Value:     keyReady in AL
                           244     ;
                           245     ; Local Variables:   None.
                           246     ; Shared Variables:  keyReady
                           247     
                           248     ; Input:            None.
                           249     ; Output:            None.
                           250     ;
                           251     ; Error Handling:    None.
                           252     ;
                           253     ; Algorithms:        None.
                           254     ; Data Structures:   None.
                           255     ;
                           256     ; Registers Changed: AL
                           257     ; Stack Depth:       1 words
                           258     ;
                           259     ; Last Modified:     5-2-2008
002D                       260     key_available   PROC    NEAR
                           261                             PUBLIC key_available
002D A00200         R      262                     MOV AL, keyReady        
0030 C3                    263                     RET
                           264     key_available   ENDP
                           265     
8086/87/88/186 MACRO ASSEMBLER    KEYPAD                                                   15:20:14  05/04/:8  PAGE    6


LOC  OBJ                  LINE     SOURCE

                           266     ; getkey
                           267     ;
                           268     ; Description:       Returns keycode of pressed key
                           269     ;
                           270     ; Operation:        Returns shared variable
                           271     ;
                           272     ; Arguments:         None.
                           273     ; Return Value:     keyCode in AX
                           274     ;
                           275     ; Local Variables:   None.
                           276     ; Shared Variables:  keyCode, keyReady
                           277     
                           278     ; Input:            None.
                           279     ; Output:            None.
                           280     ;
                           281     ; Error Handling:    getkey should only be called if key_available returns TRUE
                           282     ;
                           283     ; Algorithms:        None.
                           284     ; Data Structures:   None.
                           285     ;
                           286     ; Registers Changed: AX
                           287     ; Stack Depth:       1 words
                           288     ;
                           289     ; Last Modified:     5-2-2008
0031                       290     getkey   PROC    NEAR
                           291                             PUBLIC getkey
0031 A10000         R      292                     MOV AX, keyCode
0034 C60602000090   R      293                     MOV keyReady, FALSE              ;reset keyReady flag since no new pr
                                   essed keys to report
003A C3                    294                     RET
                           295     getkey   ENDP
                           296     
                           297     
                           298     ; InitCS
                           299     ;
                           300     ; Description:       Initialize the Peripheral Chip Selects on the 80188.
                           301     ;
                           302     ; Operation:         Write the initial values to the PACS and MPCS registers.
                           303     ;
                           304     ; Arguments:         None.
                           305     ; Return Value:      None.
                           306     ;
                           307     ; Local Variables:   None.
                           308     ; Shared Variables:  None.
                           309     ; Global Variables:  None.
                           310     ;
                           311     ; Input:             None.
                           312     ; Output:            None.
                           313     ;
                           314     ; Error Handling:    None.
                           315     ;
                           316     ; Algorithms:        None.
                           317     ; Data Structures:   None.
                           318     ;
                           319     ; Registers Changed: AX, DX
8086/87/88/186 MACRO ASSEMBLER    KEYPAD                                                   15:20:14  05/04/:8  PAGE    7


LOC  OBJ                  LINE     SOURCE

                           320     ; Stack Depth:       0 words
                           321     ;
                           322     ; Author:            Glen George
                           323     ; Last Modified:     Oct. 29, 1997
                           324     
003B                       325     InitCS  PROC    NEAR
                           326                     PUBLIC InitCS
                           327     
                           328     
003B BAA4FF                329             MOV     DX, PACSreg     ;setup to write to PACS register
003E B80300                330             MOV     AX, PACSval
0041 EE                    331             OUT     DX, AL          ;write PACSval to PACS (base at 0, 3 wait states)
                           332     
0042 BAA8FF                333             MOV     DX, MPCSreg     ;setup to write to MPCS register
0045 B88301                334             MOV     AX, MPCSval
0048 EE                    335             OUT     DX, AL          ;write MPCSval to MPCS (I/O space, 3 wait states)
                           336     
                           337     
0049 C3                    338             RET                     ;done so return
                           339     
                           340     
                           341     InitCS  ENDP
                           342     
                           343     
                           344     
                           345     
                           346     
                           347     
                           348     
                           349     
                           350     ; InstallHandlerInt0
                           351     ;
                           352     ; Description:       Install the event handler for the int0 interrupt.
                           353     ;
                           354     ; Operation:         Writes the address of the int 0 event handler to the
                           355     ;                    appropriate interrupt vector.
                           356     ;
                           357     ; Arguments:         None.
                           358     ; Return Value:      None.
                           359     ;
                           360     ; Local Variables:   None.
                           361     ; Shared Variables:  None.
                           362     ; Global Variables:  None.
                           363     ;
                           364     ; Input:             None.
                           365     ; Output:            None.
                           366     ;
                           367     ; Error Handling:    None.
                           368     ;
                           369     ; Algorithms:        None.
                           370     ; Data Structures:   None.
                           371     ;
                           372     ; Registers Changed: flags, AX, ES
                           373     ; Stack Depth:       0 words
                           374     ;
8086/87/88/186 MACRO ASSEMBLER    KEYPAD                                                   15:20:14  05/04/:8  PAGE    8


LOC  OBJ                  LINE     SOURCE

                           375     ; Author:            Samuel Yang
                           376     ; Last Modified:     5-2-2008
                           377     
004A                       378     InstallHandlerInt0  PROC    NEAR
                           379                             PUBLIC InstallHandlerInt0
                           380     
                           381     
004A 33C0                  382             XOR     AX, AX          ;clear ES (interrupt vectors are in segment 0)
004C 8EC0                  383             MOV     ES, AX
                           384                                     ;store the vector
004E 26C70630000000 R      385             MOV     ES: WORD PTR (4 * Int0Vec), OFFSET(Int0EventHandler)
0055 26C7063200---- R      386             MOV     ES: WORD PTR (4 * Int0Vec + 2), SEG(Int0EventHandler)
                           387     
005C BA38FF                388                     MOV DX, INT0Ctrlr
005F B011                  389                     MOV AL, INT0CtrlrVal
0061 EE                    390                     OUT DX, AL
0062 FB                    391                     STI ;enable interrupts
                           392                     
0063 C3                    393             RET                     ;all done, return
                           394     
                           395     
                           396     InstallHandlerInt0  ENDP
                           397     
                           398     
                           399     
                           400     
                           401     ; ClrIRQVectors
                           402     ;
                           403     ; Description:      This functions installs the IllegalEventHandler for all
                           404     ;                   interrupt vectors in the interrupt vector table.  Note
                           405     ;                   that all 256 vectors are initialized so the code must be
                           406     ;                   located above 400H.  The initialization skips  (does not
                           407     ;                   initialize vectors) from vectors FIRST_RESERVED_VEC to
                           408     ;                   LAST_RESERVED_VEC.
                           409     ;
                           410     ; Arguments:        None.
                           411     ; Return Value:     None.
                           412     ;
                           413     ; Local Variables:  CX    - vector counter.
                           414     ;                   ES:SI - pointer to vector table.
                           415     ; Shared Variables: None.
                           416     ; Global Variables: None.
                           417     ;
                           418     ; Input:            None.
                           419     ; Output:           None.
                           420     ;
                           421     ; Error Handling:   None.
                           422     ;
                           423     ; Algorithms:       None.
                           424     ; Data Structures:  None.
                           425     ;
                           426     ; Registers Used:   flags, AX, CX, SI, ES
                           427     ; Stack Depth:      1 word
                           428     ;
                           429     ; Author:           Glen George
8086/87/88/186 MACRO ASSEMBLER    KEYPAD                                                   15:20:14  05/04/:8  PAGE    9


LOC  OBJ                  LINE     SOURCE

                           430     ; Last Modified:    Feb. 8, 2002
                           431     
0064                       432     ClrIRQVectors   PROC    NEAR
                           433                             PUBLIC ClrIRQVectors
                           434     
                           435     
0064                       436     InitClrVectorLoop:              ;setup to store the same handler 256 times
                           437     
0064 33C0                  438             XOR     AX, AX          ;clear ES (interrupt vectors are in segment 0)
0066 8EC0                  439             MOV     ES, AX
0068 BE0000                440             MOV     SI, 0           ;initialize SI to skip RESERVED_VECS (4 bytes each)
                           441     
006B B90001                442             MOV     CX, 256         ;up to 256 vectors to initialize
                           443     
                           444     
006E                       445     ClrVectorLoop:                  ;loop clearing each vector
                           446                                     ;check if should store the vector
006E 83FE04                447             CMP     SI, 4 * FIRST_RESERVED_VEC
0071 7205                  448             JB      DoStore         ;if before start of reserved field - store it
0073 83FE0C                449             CMP     SI, 4 * LAST_RESERVED_VEC
0076 760B                  450             JBE     DoneStore       ;if in the reserved vectors - don't store it
                           451             
                           452     
0078                       453     DoStore:                        ;store the vector
0078 26C7048900     R      454             MOV     ES: WORD PTR [SI], OFFSET(IllegalEventHandler)
007D 26C74402----   R      455             MOV     ES: WORD PTR [SI + 2], SEG(IllegalEventHandler)
                           456     
0083                       457     DoneStore:                      ;done storing the vector
0083 83C604                458             ADD     SI, 4           ;update pointer to next vector
                           459     
0086 E2E6                  460             LOOP    ClrVectorLoop   ;loop until have cleared all vectors
                           461         
                           462     
                           463     
0088                       464     EndClrIRQVectors:               ;all done, return
0088 C3                    465             RET
                           466     
                           467     
                           468     ClrIRQVectors   ENDP
                           469     
                           470     
                           471     
                           472     ; IllegalEventHandler
                           473     ;
                           474     ; Description:       This procedure is the event handler for illegal
                           475     ;                    (uninitialized) interrupts.  It does nothing - it just
                           476     ;                    returns after sending a non-specific EOI.
                           477     ;
                           478     ; Operation:         Send a non-specific EOI and return.
                           479     ;
                           480     ; Arguments:         None.
                           481     ; Return Value:      None.
                           482     ;
                           483     ; Local Variables:   None.
                           484     ; Shared Variables:  None.
8086/87/88/186 MACRO ASSEMBLER    KEYPAD                                                   15:20:14  05/04/:8  PAGE   10


LOC  OBJ                  LINE     SOURCE

                           485     ; Global Variables:  None.
                           486     ;
                           487     ; Input:             None.
                           488     ; Output:            None.
                           489     ;
                           490     ; Error Handling:    None.
                           491     ;
                           492     ; Algorithms:        None.
                           493     ; Data Structures:   None.
                           494     ;
                           495     ; Registers Changed: None
                           496     ; Stack Depth:       2 words
                           497     ;
                           498     ; Author:            Glen George
                           499     ; Last Modified:     Dec. 25, 2000
                           500     
0089                       501     IllegalEventHandler     PROC    NEAR
                           502     
0089 90                    503             NOP                             ;do nothing (can set breakpoint here)
                           504     
008A 50                    505             PUSH    AX                      ;save the registers
008B 52                    506             PUSH    DX
                           507     
008C BA22FF                508             MOV     DX, INTCtrlrEOI         ;send a non-sepecific EOI to the
008F B80080                509             MOV     AX, NonSpecEOI          ;   interrupt controller to clear out
0092 EE                    510             OUT     DX, AL                  ;   the interrupt that got us here
                           511     
0093 5A                    512             POP     DX                      ;restore the registers
0094 58                    513             POP     AX
                           514     
0095 CF                    515             IRET                            ;and return
                           516     
                           517     
                           518     IllegalEventHandler     ENDP
                           519     
                           520     
----                       521     CODE ENDS
                           522     
                           523     ;the data segment
                           524     
----                       525     DATA    SEGMENT PUBLIC  'DATA'
0000 ????                  526     keyCode  DW ?
0002 ??                    527     keyReady DB ?
----                       528     DATA    ENDS
                           529     
                           530     
                           531     
                           532     
                           533             END     

ASSEMBLY COMPLETE, NO ERRORS FOUND
