//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.Ccr.Core;
using Microsoft.Dss.Core;
using Microsoft.Dss.Core.Attributes;
using Microsoft.Dss.ServiceModel.Dssp;
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using W3C.Soap;
using compression = System.IO.Compression;
using constructor = Microsoft.Dss.Services.Constructor;
using contractmanager = Microsoft.Dss.Services.ContractManager;
using contractmodel = Microsoft.Dss.Services.ContractModel;
using io = System.IO;
using motorcontrol = RoboMagellan.MotorControl.Proxy;
using reflection = System.Reflection;


namespace RoboMagellan.MotorControl.Proxy
{
    
    
    /// <summary>
    /// GenericMotor Contract
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public sealed class Contract
    {
        
        /// The Unique Contract Identifier for the GenericMotor service
        public const String Identifier = "http://schemas.tempuri.org/2008/03/genericmotor.html";
        
        /// The Dss Service dssModel Contract(s)
        public static List<contractmodel.ServiceSummary> ServiceModel()
        {
            contractmanager.ServiceSummaryLoader loader = new contractmanager.ServiceSummaryLoader();
            return loader.GetServiceSummaries(typeof(Contract).Assembly);

        }
        
        /// <summary>
        /// Creates an instance of the service associated with this contract
        /// </summary>
        /// <param name="contructorServicePort">Contractor Service that will create the instance</param>
        /// <param name="partners">Optional list of service partners for new service instance</param>
        /// <returns>Result PortSet for retrieving service creation response</returns>
        public static DsspResponsePort<CreateResponse> CreateService(constructor.ConstructorPort contructorServicePort, params PartnerType[] partners)
        {
            DsspResponsePort<CreateResponse> result = new DsspResponsePort<CreateResponse>();
            ServiceInfoType si = new ServiceInfoType(Contract.Identifier, null);
            if (partners != null)
            {
                si.PartnerList = new List<PartnerType>(partners);
            }
            Microsoft.Dss.Services.Constructor.Create create =
                new Microsoft.Dss.Services.Constructor.Create(si, result);
            contructorServicePort.Post(create);
            return result;

        }
        
        /// <summary>
        /// Creates an instance of the service associated with this contract
        /// </summary>
        /// <param name="contructorServicePort">Contractor Service that will create the instance</param>
        /// <returns>Result PortSet for retrieving service creation response</returns>
        public static DsspResponsePort<CreateResponse> CreateService(constructor.ConstructorPort contructorServicePort)
        {
            return Contract.CreateService(contructorServicePort, null);
        }
    }
    
    /// <summary>
    /// Generic Motor State
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("GenericMotorState", Namespace="http://schemas.tempuri.org/2008/03/genericmotor.html")]
    public class GenericMotorState : ICloneable, IDssSerializable
    {
        
        /// <summary>
        /// Copy To Generic Motor State
        /// </summary>
        public virtual void CopyTo(IDssSerializable target)
        {
            GenericMotorState typedTarget = target as GenericMotorState;

            if (typedTarget == null)
                throw new ArgumentException("CopyTo({0}) requires type {0}", this.GetType().FullName);
        }
        
        /// <summary>
        /// Clone Generic Motor State
        /// </summary>
        public virtual object Clone()
        {
            // For a class without fields, cloning isn't necessary
            return this;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public virtual void Serialize(System.IO.BinaryWriter writer)
        {
        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public virtual object Deserialize(System.IO.BinaryReader reader)
        {
            return this;

        }
    }
    
    /// <summary>
    /// Motor Speed
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("MotorSpeed", Namespace="http://schemas.tempuri.org/2008/03/genericmotor.html")]
    public struct MotorSpeed : ICloneable, IDssSerializable
    {
        
        private SByte _left;
        
        private SByte _right;
        
        /// <summary>
        /// Left
        /// </summary>
        [DataMember()]
        public SByte Left
        {
            get
            {
                return this._left;
            }
            set
            {
                this._left = value;
            }
        }
        
        /// <summary>
        /// Right
        /// </summary>
        [DataMember()]
        public SByte Right
        {
            get
            {
                return this._right;
            }
            set
            {
                this._right = value;
            }
        }
        
        /// <summary>
        /// Copy To Motor Speed
        /// </summary>
        public void CopyTo(IDssSerializable target)
        {
            throw new ArgumentException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        /// Clone Motor Speed
        /// </summary>
        public object Clone()
        {
            MotorSpeed target = new MotorSpeed();

            target.Left = this.Left;
            target.Right = this.Right;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public void Serialize(System.IO.BinaryWriter writer)
        {
            writer.Write(Left);

            writer.Write(Right);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            Left = reader.ReadSByte();

            Right = reader.ReadSByte();

            return this;

        }
    }
    
    /// <summary>
    /// Stop Info
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("StopInfo", Namespace="http://schemas.tempuri.org/2008/03/genericmotor.html")]
    public struct StopInfo : ICloneable, IDssSerializable
    {
        
        /// <summary>
        /// Copy To Stop Info
        /// </summary>
        public void CopyTo(IDssSerializable target)
        {
            throw new ArgumentException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        /// Clone Stop Info
        /// </summary>
        public object Clone()
        {
            // For a class without fields, cloning isn't necessary
            return this;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public void Serialize(System.IO.BinaryWriter writer)
        {
        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            return this;

        }
    }
    
    /// <summary>
    /// Ack Info
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("AckInfo", Namespace="http://schemas.tempuri.org/2008/03/genericmotor.html")]
    public struct AckInfo : ICloneable, IDssSerializable
    {
        
        /// <summary>
        /// Copy To Ack Info
        /// </summary>
        public void CopyTo(IDssSerializable target)
        {
            throw new ArgumentException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        /// Clone Ack Info
        /// </summary>
        public object Clone()
        {
            // For a class without fields, cloning isn't necessary
            return this;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public void Serialize(System.IO.BinaryWriter writer)
        {
        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            return this;

        }
    }
    
    /// <summary>
    /// Turn Data
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("TurnData", Namespace="http://schemas.tempuri.org/2008/03/genericmotor.html")]
    public struct TurnData : ICloneable, IDssSerializable
    {
        
        private Double _heading;
        
        /// <summary>
        /// Heading
        /// </summary>
        [DataMember()]
        public Double heading
        {
            get
            {
                return this._heading;
            }
            set
            {
                this._heading = value;
            }
        }
        
        /// <summary>
        /// Copy To Turn Data
        /// </summary>
        public void CopyTo(IDssSerializable target)
        {
            throw new ArgumentException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        /// Clone Turn Data
        /// </summary>
        public object Clone()
        {
            TurnData target = new TurnData();

            target.heading = this.heading;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public void Serialize(System.IO.BinaryWriter writer)
        {
            writer.Write(heading);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            heading = reader.ReadDouble();

            return this;

        }
    }
    
    /// <summary>
    /// Generic Motor Operations
    /// </summary>
    [ServicePort()]
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class GenericMotorOperations : PortSet<Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, Get, SetSpeed, Stop, SendAck, Turn>
    {
        
        /// <summary>
        /// Required Lookup request body type
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.LookupResponse,Fault> DsspDefaultLookup()
        {
            Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Dssp Default Lookup and return the response port.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.LookupResponse,Fault> DsspDefaultLookup(Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body)
        {
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// A request to drop the service.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType,Fault> DsspDefaultDrop()
        {
            Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Dssp Default Drop and return the response port.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType,Fault> DsspDefaultDrop(Microsoft.Dss.ServiceModel.Dssp.DropRequestType body)
        {
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Required Get body type
        /// </summary>
        public virtual PortSet<GenericMotorState,Fault> Get()
        {
            Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            Get op = new Get(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Get and return the response port.
        /// </summary>
        public virtual PortSet<GenericMotorState,Fault> Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body)
        {
            Get op = new Get();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Motor Speed
        /// </summary>
        public virtual Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType> SetSpeed()
        {
            MotorSpeed body = new MotorSpeed();
            SetSpeed op = new SetSpeed(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Set Speed and return the response port.
        /// </summary>
        public virtual Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType> SetSpeed(MotorSpeed body)
        {
            SetSpeed op = new SetSpeed();
            op.Body = body;
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Stop Info
        /// </summary>
        public virtual Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType> Stop()
        {
            StopInfo body = new StopInfo();
            Stop op = new Stop(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Stop and return the response port.
        /// </summary>
        public virtual Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType> Stop(StopInfo body)
        {
            Stop op = new Stop();
            op.Body = body;
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Ack Info
        /// </summary>
        public virtual Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType> SendAck()
        {
            AckInfo body = new AckInfo();
            SendAck op = new SendAck(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Send Ack and return the response port.
        /// </summary>
        public virtual Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType> SendAck(AckInfo body)
        {
            SendAck op = new SendAck();
            op.Body = body;
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Turn Data
        /// </summary>
        public virtual Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType> Turn()
        {
            TurnData body = new TurnData();
            Turn op = new Turn(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Turn and return the response port.
        /// </summary>
        public virtual Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType> Turn(TurnData body)
        {
            Turn op = new Turn();
            op.Body = body;
            this.Post(op);
            return op.ResponsePort;

        }
    }
    
    /// <summary>
    /// Get
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : Microsoft.Dss.ServiceModel.Dssp.Get<Microsoft.Dss.ServiceModel.Dssp.GetRequestType, PortSet<GenericMotorState, Fault>>
    {
        
        /// <summary>
        /// Get
        /// </summary>
        public Get()
        {
        }
        
        /// <summary>
        /// Get
        /// </summary>
        public Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body)
        {
        }
        
        /// <summary>
        /// Get
        /// </summary>
        public Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, Microsoft.Ccr.Core.PortSet<GenericMotorState,W3C.Soap.Fault> responsePort) : 
                base(body, responsePort)
        {
        }
    }
    
    /// <summary>
    /// Set Speed
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class SetSpeed : Microsoft.Dss.ServiceModel.Dssp.Submit<MotorSpeed, Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType>>
    {
        
        /// <summary>
        /// Set Speed
        /// </summary>
        public SetSpeed()
        {
        }
        
        /// <summary>
        /// Set Speed
        /// </summary>
        public SetSpeed(MotorSpeed body) : 
                base(body)
        {
        }
        
        /// <summary>
        /// Set Speed
        /// </summary>
        public SetSpeed(MotorSpeed body, Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType> responsePort) : 
                base(body, responsePort)
        {
        }
    }
    
    /// <summary>
    /// Stop
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class Stop : Microsoft.Dss.ServiceModel.Dssp.Submit<StopInfo, Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType>>
    {
        
        /// <summary>
        /// Stop
        /// </summary>
        public Stop()
        {
        }
        
        /// <summary>
        /// Stop
        /// </summary>
        public Stop(StopInfo body) : 
                base(body)
        {
        }
        
        /// <summary>
        /// Stop
        /// </summary>
        public Stop(StopInfo body, Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType> responsePort) : 
                base(body, responsePort)
        {
        }
    }
    
    /// <summary>
    /// Send Ack
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class SendAck : Microsoft.Dss.ServiceModel.Dssp.Submit<AckInfo, Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType>>
    {
        
        /// <summary>
        /// Send Ack
        /// </summary>
        public SendAck()
        {
        }
        
        /// <summary>
        /// Send Ack
        /// </summary>
        public SendAck(AckInfo body) : 
                base(body)
        {
        }
        
        /// <summary>
        /// Send Ack
        /// </summary>
        public SendAck(AckInfo body, Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType> responsePort) : 
                base(body, responsePort)
        {
        }
    }
    
    /// <summary>
    /// Turn
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class Turn : Microsoft.Dss.ServiceModel.Dssp.Submit<TurnData, Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType>>
    {
        
        /// <summary>
        /// Turn
        /// </summary>
        public Turn()
        {
        }
        
        /// <summary>
        /// Turn
        /// </summary>
        public Turn(TurnData body) : 
                base(body)
        {
        }
        
        /// <summary>
        /// Turn
        /// </summary>
        public Turn(TurnData body, Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType> responsePort) : 
                base(body, responsePort)
        {
        }
    }
}
