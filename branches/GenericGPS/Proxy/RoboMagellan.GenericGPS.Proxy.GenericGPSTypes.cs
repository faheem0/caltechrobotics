//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.Ccr.Core;
using Microsoft.Dss.Core;
using Microsoft.Dss.Core.Attributes;
using Microsoft.Dss.ServiceModel.Dssp;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml.Serialization;
using W3C.Soap;
using compression = System.IO.Compression;
using constructor = Microsoft.Dss.Services.Constructor;
using contractmanager = Microsoft.Dss.Services.ContractManager;
using contractmodel = Microsoft.Dss.Services.ContractModel;
using dssphttp = Microsoft.Dss.Core.DsspHttp;
using genericgps = RoboMagellan.GenericGPS.Proxy;
using io = System.IO;
using reflection = System.Reflection;


namespace RoboMagellan.GenericGPS.Proxy
{
    
    
    /// <summary>
    /// GenericGPS Contract
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    [DisplayName("Generic GPS Contract")]
    [Description("This is a generic contract for a GPS device")]
    public sealed class Contract
    {
        
        /// The Unique Contract Identifier for the GenericGPS service
        [DataMember()]
        public const String Identifier = "http://schemas.tempuri.org/2008/03/genericgps.html";
        
        /// The Dss Service dssModel Contract(s)
        public static List<contractmodel.ServiceSummary> ServiceModel()
        {
            contractmanager.ServiceSummaryLoader loader = new contractmanager.ServiceSummaryLoader();
            return loader.GetServiceSummaries(typeof(Contract).Assembly);

        }
        
        /// <summary>
        /// Creates an instance of the service associated with this contract
        /// </summary>
        /// <param name="contructorServicePort">Contractor Service that will create the instance</param>
        /// <param name="partners">Optional list of service partners for new service instance</param>
        /// <returns>Result PortSet for retrieving service creation response</returns>
        public static DsspResponsePort<CreateResponse> CreateService(constructor.ConstructorPort contructorServicePort, params PartnerType[] partners)
        {
            DsspResponsePort<CreateResponse> result = new DsspResponsePort<CreateResponse>();
            ServiceInfoType si = new ServiceInfoType(Contract.Identifier, null);
            if (partners != null)
            {
                si.PartnerList = new List<PartnerType>(partners);
            }
            Microsoft.Dss.Services.Constructor.Create create =
                new Microsoft.Dss.Services.Constructor.Create(si, result);
            contructorServicePort.Post(create);
            return result;

        }
        
        /// <summary>
        /// Creates an instance of the service associated with this contract
        /// </summary>
        /// <param name="contructorServicePort">Contractor Service that will create the instance</param>
        /// <returns>Result PortSet for retrieving service creation response</returns>
        public static DsspResponsePort<CreateResponse> CreateService(constructor.ConstructorPort contructorServicePort)
        {
            return Contract.CreateService(contructorServicePort, null);
        }
    }
    
    /// <summary>
    /// Specifies the state of a GPS service
    /// </summary>
    [DisplayName("Generic GPS State")]
    [Description("Specifies the state of a GPS service")]
    [DataContract()]
    [XmlRootAttribute("GenericGPSState", Namespace="http://schemas.tempuri.org/2008/03/genericgps.html")]
    public class GenericGPSState : ICloneable, IDssSerializable
    {
        
        private UTMData _coords;
        
        /// <summary>
        /// Coords
        /// </summary>
        [DataMember()]
        [DisplayName("Current coordinates in UTM")]
        [Description("This represents the current coordinates in UTM notation")]
        public UTMData Coords
        {
            get
            {
                return this._coords;
            }
            set
            {
                this._coords = value;
            }
        }
        
        /// <summary>
        /// Copy To GenericGPS State
        /// </summary>
        public virtual void CopyTo(IDssSerializable target)
        {
            GenericGPSState typedTarget = target as GenericGPSState;

            if (typedTarget == null)
                throw new ArgumentException("CopyTo({0}) requires type {0}", this.GetType().FullName);
            typedTarget.Coords = this.Coords;
        }
        
        /// <summary>
        /// Clone Generic GPS State
        /// </summary>
        public virtual object Clone()
        {
            GenericGPSState target = new GenericGPSState();

            target.Coords = this.Coords;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public virtual void Serialize(System.IO.BinaryWriter writer)
        {
            ((Microsoft.Dss.Core.IDssSerializable)Coords).Serialize(writer);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public virtual object Deserialize(System.IO.BinaryReader reader)
        {
            Coords = (UTMData)((Microsoft.Dss.Core.IDssSerializable)new UTMData()).Deserialize(reader);

            return this;

        }
    }
    
    /// <summary>
    /// Tuple storing UTM GPS Coordinates
    /// </summary>
    [Description("Tuple storing UTM GPS Coordinates")]
    [DataContract()]
    [XmlRootAttribute("UTMData", Namespace="http://schemas.tempuri.org/2008/03/genericgps.html")]
    public struct UTMData : ICloneable, IDssSerializable
    {
        
        private Int32 _numSat;
        
        private Double _timestamp;
        
        private Double _east;
        
        private Double _north;
        
        /// <summary>
        /// Num Sat
        /// </summary>
        [DataMember()]
        public Int32 NumSat
        {
            get
            {
                return this._numSat;
            }
            set
            {
                this._numSat = value;
            }
        }
        
        /// <summary>
        /// Timestamp
        /// </summary>
        [DataMember()]
        public Double Timestamp
        {
            get
            {
                return this._timestamp;
            }
            set
            {
                this._timestamp = value;
            }
        }
        
        /// <summary>
        /// East
        /// </summary>
        [DataMember()]
        public Double East
        {
            get
            {
                return this._east;
            }
            set
            {
                this._east = value;
            }
        }
        
        /// <summary>
        /// North
        /// </summary>
        [DataMember()]
        public Double North
        {
            get
            {
                return this._north;
            }
            set
            {
                this._north = value;
            }
        }
        
        /// <summary>
        /// Copy To UTM Data
        /// </summary>
        public void CopyTo(IDssSerializable target)
        {
            throw new ArgumentException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        /// Clone UTM Data
        /// </summary>
        public object Clone()
        {
            UTMData target = new UTMData();

            target.NumSat = this.NumSat;
            target.Timestamp = this.Timestamp;
            target.East = this.East;
            target.North = this.North;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public void Serialize(System.IO.BinaryWriter writer)
        {
            writer.Write(NumSat);

            writer.Write(Timestamp);

            writer.Write(East);

            writer.Write(North);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            NumSat = reader.ReadInt32();

            Timestamp = reader.ReadDouble();

            East = reader.ReadDouble();

            North = reader.ReadDouble();

            return this;

        }
    }
    
    /// <summary>
    /// GenericGPS Operations
    /// </summary>
    [ServicePort()]
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class GenericGPSOperations : PortSet<Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, Get, Subscribe, dssphttp.HttpGet, dssphttp.HttpPost, UTMNotification>
    {
        
        /// <summary>
        /// Required Lookup request body type
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.LookupResponse,Fault> DsspDefaultLookup()
        {
            Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Dssp Default Lookup and return the response port.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.LookupResponse,Fault> DsspDefaultLookup(Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body)
        {
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// A request to drop the service.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType,Fault> DsspDefaultDrop()
        {
            Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Dssp Default Drop and return the response port.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType,Fault> DsspDefaultDrop(Microsoft.Dss.ServiceModel.Dssp.DropRequestType body)
        {
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Required Get body type
        /// </summary>
        public virtual PortSet<GenericGPSState,Fault> Get()
        {
            Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            Get op = new Get(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Get and return the response port.
        /// </summary>
        public virtual PortSet<GenericGPSState,Fault> Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body)
        {
            Get op = new Get();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Subscribe and return the response port.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType,Fault> Subscribe(IPort notificationPort)
        {
            Subscribe op = new Subscribe();
            op.Body = new Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            op.NotificationPort = notificationPort;
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Subscribe and return the response port.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType,Fault> Subscribe(Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, IPort notificationPort)
        {
            Subscribe op = new Subscribe();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            op.NotificationPort = notificationPort;
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// DsspHttp Get request body
        /// </summary>
        public virtual PortSet<dssphttp.HttpResponseType,Fault> HttpGet()
        {
            dssphttp.HttpGetRequestType body = new dssphttp.HttpGetRequestType();
            dssphttp.HttpGet op = new dssphttp.HttpGet(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Http Get and return the response port.
        /// </summary>
        public virtual PortSet<dssphttp.HttpResponseType,Fault> HttpGet(dssphttp.HttpGetRequestType body)
        {
            dssphttp.HttpGet op = new dssphttp.HttpGet();
            op.Body = body ?? new dssphttp.HttpGetRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// DsspHttp Post request body
        /// </summary>
        public virtual PortSet<dssphttp.HttpResponseType,Fault> HttpPost()
        {
            dssphttp.HttpPostRequestType body = new dssphttp.HttpPostRequestType();
            dssphttp.HttpPost op = new dssphttp.HttpPost(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Http Post and return the response port.
        /// </summary>
        public virtual PortSet<dssphttp.HttpResponseType,Fault> HttpPost(dssphttp.HttpPostRequestType body)
        {
            dssphttp.HttpPost op = new dssphttp.HttpPost();
            op.Body = body ?? new dssphttp.HttpPostRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Tuple storing UTM GPS Coordinates
        /// </summary>
        public virtual Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UTMNotification()
        {
            UTMData body = new UTMData();
            UTMNotification op = new UTMNotification(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post UTM Notification and return the response port.
        /// </summary>
        public virtual Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UTMNotification(UTMData body)
        {
            UTMNotification op = new UTMNotification();
            op.Body = body;
            this.Post(op);
            return op.ResponsePort;

        }
    }
    
    /// <summary>
    /// Get
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : Microsoft.Dss.ServiceModel.Dssp.Get<Microsoft.Dss.ServiceModel.Dssp.GetRequestType, PortSet<GenericGPSState, Fault>>
    {
        
        /// <summary>
        /// Get
        /// </summary>
        public Get()
        {
        }
        
        /// <summary>
        /// Get
        /// </summary>
        public Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body)
        {
        }
        
        /// <summary>
        /// Get
        /// </summary>
        public Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, Microsoft.Ccr.Core.PortSet<GenericGPSState,W3C.Soap.Fault> responsePort) : 
                base(body, responsePort)
        {
        }
    }
    
    /// <summary>
    /// Subscribe
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : Microsoft.Dss.ServiceModel.Dssp.Subscribe<Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, PortSet<Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, Fault>, GenericGPSOperations>
    {
        
        /// <summary>
        /// Subscribe
        /// </summary>
        public Subscribe()
        {
        }
        
        /// <summary>
        /// Subscribe
        /// </summary>
        public Subscribe(Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body)
        {
        }
        
        /// <summary>
        /// Subscribe
        /// </summary>
        public Subscribe(Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, Microsoft.Ccr.Core.PortSet<Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType,W3C.Soap.Fault> responsePort) : 
                base(body, responsePort)
        {
        }
        
        /// <summary>
        /// Subscribe
        /// </summary>
        public Subscribe(Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, Microsoft.Ccr.Core.PortSet<Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType,W3C.Soap.Fault> responsePort, GenericGPSOperations notificationPort) : 
                base(body, responsePort, notificationPort)
        {
        }
    }
    
    /// <summary>
    /// UTM Notification
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class UTMNotification : Microsoft.Dss.ServiceModel.Dssp.Update<UTMData, Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType>>
    {
        
        /// <summary>
        /// UTM Notification
        /// </summary>
        public UTMNotification()
        {
        }
        
        /// <summary>
        /// UTM Notification
        /// </summary>
        public UTMNotification(UTMData body) : 
                base(body)
        {
        }
        
        /// <summary>
        /// UTM Notification
        /// </summary>
        public UTMNotification(UTMData body, Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> responsePort) : 
                base(body, responsePort)
        {
        }
    }
}
